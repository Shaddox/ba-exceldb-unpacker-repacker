# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ScenarioScriptExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsScenarioScriptExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScenarioScriptExcel()
        x.Init(buf, n + offset)
        return x

    # ScenarioScriptExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScenarioScriptExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioScriptExcel
    def SelectionGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioScriptExcel
    def BGMId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioScriptExcel
    def Sound(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioScriptExcel
    def Transition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ScenarioScriptExcel
    def BGName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ScenarioScriptExcel
    def BGEffect(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ScenarioScriptExcel
    def PopupFileName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioScriptExcel
    def ScriptKr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioScriptExcel
    def TextJp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioScriptExcel
    def TextTh(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioScriptExcel
    def TextTw(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioScriptExcel
    def TextEn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioScriptExcel
    def VoiceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ScenarioScriptExcel
    def TeenMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def ScenarioScriptExcelStart(builder): builder.StartObject(15)
def ScenarioScriptExcelAddGroupId(builder, GroupId): builder.PrependInt64Slot(0, GroupId, 0)
def ScenarioScriptExcelAddSelectionGroup(builder, SelectionGroup): builder.PrependInt64Slot(1, SelectionGroup, 0)
def ScenarioScriptExcelAddBGMId(builder, BGMId): builder.PrependInt64Slot(2, BGMId, 0)
def ScenarioScriptExcelAddSound(builder, Sound): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(Sound), 0)
def ScenarioScriptExcelAddTransition(builder, Transition): builder.PrependUint32Slot(4, Transition, 0)
def ScenarioScriptExcelAddBGName(builder, BGName): builder.PrependUint32Slot(5, BGName, 0)
def ScenarioScriptExcelAddBGEffect(builder, BGEffect): builder.PrependUint32Slot(6, BGEffect, 0)
def ScenarioScriptExcelAddPopupFileName(builder, PopupFileName): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(PopupFileName), 0)
def ScenarioScriptExcelAddScriptKr(builder, ScriptKr): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(ScriptKr), 0)
def ScenarioScriptExcelAddTextJp(builder, TextJp): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(TextJp), 0)
def ScenarioScriptExcelAddTextTh(builder, TextTh): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(TextTh), 0)
def ScenarioScriptExcelAddTextTw(builder, TextTw): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(TextTw), 0)
def ScenarioScriptExcelAddTextEn(builder, TextEn): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(TextEn), 0)
def ScenarioScriptExcelAddVoiceId(builder, VoiceId): builder.PrependUint32Slot(13, VoiceId, 0)
def ScenarioScriptExcelAddTeenMode(builder, TeenMode): builder.PrependBoolSlot(14, TeenMode, 0)
def ScenarioScriptExcelEnd(builder): return builder.EndObject()
