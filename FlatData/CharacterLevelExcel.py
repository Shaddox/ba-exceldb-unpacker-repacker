# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterLevelExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCharacterLevelExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterLevelExcel()
        x.Init(buf, n + offset)
        return x

    # CharacterLevelExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterLevelExcel
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterLevelExcel
    def Exp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterLevelExcel
    def TotalExp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def CharacterLevelExcelStart(builder): builder.StartObject(3)
def CharacterLevelExcelAddLevel(builder, Level): builder.PrependInt32Slot(0, Level, 0)
def CharacterLevelExcelAddExp(builder, Exp): builder.PrependInt64Slot(1, Exp, 0)
def CharacterLevelExcelAddTotalExp(builder, TotalExp): builder.PrependInt64Slot(2, TotalExp, 0)
def CharacterLevelExcelEnd(builder): return builder.EndObject()
