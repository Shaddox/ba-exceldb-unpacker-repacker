# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameDreamInfoExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMiniGameDreamInfoExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameDreamInfoExcel()
        x.Init(buf, n + offset)
        return x

    # MiniGameDreamInfoExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameDreamInfoExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamInfoExcel
    def DreamMakerMultiplierCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamInfoExcel
    def DreamMakerMultiplierConditionValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamInfoExcel
    def DreamMakerMultiplierMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamInfoExcel
    def DreamMakerDays(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamInfoExcel
    def DreamMakerActionPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamInfoExcel
    def DreamMakerParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamInfoExcel
    def DreamMakerParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamInfoExcel
    def DreamMakerDailyPointParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamInfoExcel
    def DreamMakerDailyPointId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamInfoExcel
    def DreamMakerParameterTransfer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamInfoExcel
    def ScheduleCostGoodsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamInfoExcel
    def LobbyBGMChangeScenarioId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def MiniGameDreamInfoExcelStart(builder): builder.StartObject(13)
def MiniGameDreamInfoExcelAddEventContentId(builder, EventContentId): builder.PrependInt64Slot(0, EventContentId, 0)
def MiniGameDreamInfoExcelAddDreamMakerMultiplierCondition(builder, DreamMakerMultiplierCondition): builder.PrependInt32Slot(1, DreamMakerMultiplierCondition, 0)
def MiniGameDreamInfoExcelAddDreamMakerMultiplierConditionValue(builder, DreamMakerMultiplierConditionValue): builder.PrependInt64Slot(2, DreamMakerMultiplierConditionValue, 0)
def MiniGameDreamInfoExcelAddDreamMakerMultiplierMax(builder, DreamMakerMultiplierMax): builder.PrependInt64Slot(3, DreamMakerMultiplierMax, 0)
def MiniGameDreamInfoExcelAddDreamMakerDays(builder, DreamMakerDays): builder.PrependInt64Slot(4, DreamMakerDays, 0)
def MiniGameDreamInfoExcelAddDreamMakerActionPoint(builder, DreamMakerActionPoint): builder.PrependInt64Slot(5, DreamMakerActionPoint, 0)
def MiniGameDreamInfoExcelAddDreamMakerParcelType(builder, DreamMakerParcelType): builder.PrependInt32Slot(6, DreamMakerParcelType, 0)
def MiniGameDreamInfoExcelAddDreamMakerParcelId(builder, DreamMakerParcelId): builder.PrependInt64Slot(7, DreamMakerParcelId, 0)
def MiniGameDreamInfoExcelAddDreamMakerDailyPointParcelType(builder, DreamMakerDailyPointParcelType): builder.PrependInt32Slot(8, DreamMakerDailyPointParcelType, 0)
def MiniGameDreamInfoExcelAddDreamMakerDailyPointId(builder, DreamMakerDailyPointId): builder.PrependInt64Slot(9, DreamMakerDailyPointId, 0)
def MiniGameDreamInfoExcelAddDreamMakerParameterTransfer(builder, DreamMakerParameterTransfer): builder.PrependInt64Slot(10, DreamMakerParameterTransfer, 0)
def MiniGameDreamInfoExcelAddScheduleCostGoodsId(builder, ScheduleCostGoodsId): builder.PrependInt64Slot(11, ScheduleCostGoodsId, 0)
def MiniGameDreamInfoExcelAddLobbyBGMChangeScenarioId(builder, LobbyBGMChangeScenarioId): builder.PrependInt64Slot(12, LobbyBGMChangeScenarioId, 0)
def MiniGameDreamInfoExcelEnd(builder): return builder.EndObject()
