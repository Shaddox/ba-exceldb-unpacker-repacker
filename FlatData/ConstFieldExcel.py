# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConstFieldExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsConstFieldExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConstFieldExcel()
        x.Init(buf, n + offset)
        return x

    # ConstFieldExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConstFieldExcel
    def DialogSmoothTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstFieldExcel
    def TalkDialogDurationDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstFieldExcel
    def ThinkDialogDurationDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstFieldExcel
    def IdleThinkDelayMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstFieldExcel
    def IdleThinkDelayMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstFieldExcel
    def ExclaimDurationDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstFieldExcel
    def QuestionDurationDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstFieldExcel
    def UpsetDurationDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstFieldExcel
    def SurpriseDurationDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstFieldExcel
    def BulbDurationDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstFieldExcel
    def HeartDurationDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstFieldExcel
    def SweatDurationDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstFieldExcel
    def AngryDurationDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstFieldExcel
    def MusicDurationDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstFieldExcel
    def DotDurationDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstFieldExcel
    def MomotalkDurationDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstFieldExcel
    def PhoneDurationDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstFieldExcel
    def KeywordDurationDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstFieldExcel
    def EvidenceDurationDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ConstFieldExcelStart(builder): builder.StartObject(19)
def ConstFieldExcelAddDialogSmoothTime(builder, DialogSmoothTime): builder.PrependInt32Slot(0, DialogSmoothTime, 0)
def ConstFieldExcelAddTalkDialogDurationDefault(builder, TalkDialogDurationDefault): builder.PrependInt32Slot(1, TalkDialogDurationDefault, 0)
def ConstFieldExcelAddThinkDialogDurationDefault(builder, ThinkDialogDurationDefault): builder.PrependInt32Slot(2, ThinkDialogDurationDefault, 0)
def ConstFieldExcelAddIdleThinkDelayMin(builder, IdleThinkDelayMin): builder.PrependInt32Slot(3, IdleThinkDelayMin, 0)
def ConstFieldExcelAddIdleThinkDelayMax(builder, IdleThinkDelayMax): builder.PrependInt32Slot(4, IdleThinkDelayMax, 0)
def ConstFieldExcelAddExclaimDurationDefault(builder, ExclaimDurationDefault): builder.PrependInt32Slot(5, ExclaimDurationDefault, 0)
def ConstFieldExcelAddQuestionDurationDefault(builder, QuestionDurationDefault): builder.PrependInt32Slot(6, QuestionDurationDefault, 0)
def ConstFieldExcelAddUpsetDurationDefault(builder, UpsetDurationDefault): builder.PrependInt32Slot(7, UpsetDurationDefault, 0)
def ConstFieldExcelAddSurpriseDurationDefault(builder, SurpriseDurationDefault): builder.PrependInt32Slot(8, SurpriseDurationDefault, 0)
def ConstFieldExcelAddBulbDurationDefault(builder, BulbDurationDefault): builder.PrependInt32Slot(9, BulbDurationDefault, 0)
def ConstFieldExcelAddHeartDurationDefault(builder, HeartDurationDefault): builder.PrependInt32Slot(10, HeartDurationDefault, 0)
def ConstFieldExcelAddSweatDurationDefault(builder, SweatDurationDefault): builder.PrependInt32Slot(11, SweatDurationDefault, 0)
def ConstFieldExcelAddAngryDurationDefault(builder, AngryDurationDefault): builder.PrependInt32Slot(12, AngryDurationDefault, 0)
def ConstFieldExcelAddMusicDurationDefault(builder, MusicDurationDefault): builder.PrependInt32Slot(13, MusicDurationDefault, 0)
def ConstFieldExcelAddDotDurationDefault(builder, DotDurationDefault): builder.PrependInt32Slot(14, DotDurationDefault, 0)
def ConstFieldExcelAddMomotalkDurationDefault(builder, MomotalkDurationDefault): builder.PrependInt32Slot(15, MomotalkDurationDefault, 0)
def ConstFieldExcelAddPhoneDurationDefault(builder, PhoneDurationDefault): builder.PrependInt32Slot(16, PhoneDurationDefault, 0)
def ConstFieldExcelAddKeywordDurationDefault(builder, KeywordDurationDefault): builder.PrependInt32Slot(17, KeywordDurationDefault, 0)
def ConstFieldExcelAddEvidenceDurationDefault(builder, EvidenceDurationDefault): builder.PrependInt32Slot(18, EvidenceDurationDefault, 0)
def ConstFieldExcelEnd(builder): return builder.EndObject()
