# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ScenarioBGName_GlobalExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsScenarioBGName_GlobalExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScenarioBGName_GlobalExcel()
        x.Init(buf, n + offset)
        return x

    # ScenarioBGName_GlobalExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScenarioBGName_GlobalExcel
    def GroupName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ScenarioBGName_GlobalExcel
    def NameKr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ScenarioBGName_GlobalExcel
    def NameTw(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ScenarioBGName_GlobalExcel
    def NameAsia(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ScenarioBGName_GlobalExcel
    def NameNa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ScenarioBGName_GlobalExcel
    def NameGlobal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ScenarioBGName_GlobalExcel
    def NameTeen(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def ScenarioBGName_GlobalExcelStart(builder): builder.StartObject(7)
def ScenarioBGName_GlobalExcelAddGroupName(builder, GroupName): builder.PrependUint32Slot(0, GroupName, 0)
def ScenarioBGName_GlobalExcelAddNameKr(builder, NameKr): builder.PrependUint32Slot(1, NameKr, 0)
def ScenarioBGName_GlobalExcelAddNameTw(builder, NameTw): builder.PrependUint32Slot(2, NameTw, 0)
def ScenarioBGName_GlobalExcelAddNameAsia(builder, NameAsia): builder.PrependUint32Slot(3, NameAsia, 0)
def ScenarioBGName_GlobalExcelAddNameNa(builder, NameNa): builder.PrependUint32Slot(4, NameNa, 0)
def ScenarioBGName_GlobalExcelAddNameGlobal(builder, NameGlobal): builder.PrependUint32Slot(5, NameGlobal, 0)
def ScenarioBGName_GlobalExcelAddNameTeen(builder, NameTeen): builder.PrependUint32Slot(6, NameTeen, 0)
def ScenarioBGName_GlobalExcelEnd(builder): return builder.EndObject()
