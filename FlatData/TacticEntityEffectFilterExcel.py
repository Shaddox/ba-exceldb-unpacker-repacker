# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TacticEntityEffectFilterExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTacticEntityEffectFilterExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TacticEntityEffectFilterExcel()
        x.Init(buf, n + offset)
        return x

    # TacticEntityEffectFilterExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TacticEntityEffectFilterExcel
    def TargetEffectName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TacticEntityEffectFilterExcel
    def ShowEffectToVehicle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # TacticEntityEffectFilterExcel
    def ShowEffectToBoss(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def TacticEntityEffectFilterExcelStart(builder): builder.StartObject(3)
def TacticEntityEffectFilterExcelAddTargetEffectName(builder, TargetEffectName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(TargetEffectName), 0)
def TacticEntityEffectFilterExcelAddShowEffectToVehicle(builder, ShowEffectToVehicle): builder.PrependBoolSlot(1, ShowEffectToVehicle, 0)
def TacticEntityEffectFilterExcelAddShowEffectToBoss(builder, ShowEffectToBoss): builder.PrependBoolSlot(2, ShowEffectToBoss, 0)
def TacticEntityEffectFilterExcelEnd(builder): return builder.EndObject()
