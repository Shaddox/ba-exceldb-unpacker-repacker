# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class WorldRaidBossGroupExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsWorldRaidBossGroupExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WorldRaidBossGroupExcel()
        x.Init(buf, n + offset)
        return x

    # WorldRaidBossGroupExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # WorldRaidBossGroupExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidBossGroupExcel
    def WorldRaidBossGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidBossGroupExcel
    def WorldBossName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WorldRaidBossGroupExcel
    def WorldBossPopupPortrait(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WorldRaidBossGroupExcel
    def WorldBossPopupBG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WorldRaidBossGroupExcel
    def WorldBossParcelPortrait(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WorldRaidBossGroupExcel
    def WorldBossListParcel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WorldRaidBossGroupExcel
    def WorldBossHP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidBossGroupExcel
    def WorldBossHPTw(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidBossGroupExcel
    def WorldBossHPAsia(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidBossGroupExcel
    def WorldBossHPNa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidBossGroupExcel
    def WorldBossHPGlobal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidBossGroupExcel
    def UIHideBeforeSpawn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WorldRaidBossGroupExcel
    def HideAnotherBossKilled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WorldRaidBossGroupExcel
    def WorldBossClearRewardGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidBossGroupExcel
    def AnotherBossKilled(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # WorldRaidBossGroupExcel
    def AnotherBossKilledAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # WorldRaidBossGroupExcel
    def AnotherBossKilledLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorldRaidBossGroupExcel
    def AnotherBossKilledIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # WorldRaidBossGroupExcel
    def EchelonConstraintGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidBossGroupExcel
    def ExclusiveOperatorBossSpawn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WorldRaidBossGroupExcel
    def ExclusiveOperatorBossKill(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WorldRaidBossGroupExcel
    def ExclusiveOperatorScenarioBattle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WorldRaidBossGroupExcel
    def ExclusiveOperatorBossDamaged(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WorldRaidBossGroupExcel
    def BossGroupOpenCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def WorldRaidBossGroupExcelStart(builder): builder.StartObject(22)
def WorldRaidBossGroupExcelAddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def WorldRaidBossGroupExcelAddWorldRaidBossGroupId(builder, WorldRaidBossGroupId): builder.PrependInt64Slot(1, WorldRaidBossGroupId, 0)
def WorldRaidBossGroupExcelAddWorldBossName(builder, WorldBossName): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(WorldBossName), 0)
def WorldRaidBossGroupExcelAddWorldBossPopupPortrait(builder, WorldBossPopupPortrait): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(WorldBossPopupPortrait), 0)
def WorldRaidBossGroupExcelAddWorldBossPopupBG(builder, WorldBossPopupBG): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(WorldBossPopupBG), 0)
def WorldRaidBossGroupExcelAddWorldBossParcelPortrait(builder, WorldBossParcelPortrait): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(WorldBossParcelPortrait), 0)
def WorldRaidBossGroupExcelAddWorldBossListParcel(builder, WorldBossListParcel): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(WorldBossListParcel), 0)
def WorldRaidBossGroupExcelAddWorldBossHP(builder, WorldBossHP): builder.PrependInt64Slot(7, WorldBossHP, 0)
def WorldRaidBossGroupExcelAddWorldBossHPTw(builder, WorldBossHPTw): builder.PrependInt64Slot(8, WorldBossHPTw, 0)
def WorldRaidBossGroupExcelAddWorldBossHPAsia(builder, WorldBossHPAsia): builder.PrependInt64Slot(9, WorldBossHPAsia, 0)
def WorldRaidBossGroupExcelAddWorldBossHPNa(builder, WorldBossHPNa): builder.PrependInt64Slot(10, WorldBossHPNa, 0)
def WorldRaidBossGroupExcelAddWorldBossHPGlobal(builder, WorldBossHPGlobal): builder.PrependInt64Slot(11, WorldBossHPGlobal, 0)
def WorldRaidBossGroupExcelAddUIHideBeforeSpawn(builder, UIHideBeforeSpawn): builder.PrependBoolSlot(12, UIHideBeforeSpawn, 0)
def WorldRaidBossGroupExcelAddHideAnotherBossKilled(builder, HideAnotherBossKilled): builder.PrependBoolSlot(13, HideAnotherBossKilled, 0)
def WorldRaidBossGroupExcelAddWorldBossClearRewardGroupId(builder, WorldBossClearRewardGroupId): builder.PrependInt64Slot(14, WorldBossClearRewardGroupId, 0)
def WorldRaidBossGroupExcelAddAnotherBossKilled(builder, AnotherBossKilled): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(AnotherBossKilled), 0)
def WorldRaidBossGroupExcelStartAnotherBossKilledVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def WorldRaidBossGroupExcelAddEchelonConstraintGroupId(builder, EchelonConstraintGroupId): builder.PrependInt64Slot(16, EchelonConstraintGroupId, 0)
def WorldRaidBossGroupExcelAddExclusiveOperatorBossSpawn(builder, ExclusiveOperatorBossSpawn): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(ExclusiveOperatorBossSpawn), 0)
def WorldRaidBossGroupExcelAddExclusiveOperatorBossKill(builder, ExclusiveOperatorBossKill): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(ExclusiveOperatorBossKill), 0)
def WorldRaidBossGroupExcelAddExclusiveOperatorScenarioBattle(builder, ExclusiveOperatorScenarioBattle): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(ExclusiveOperatorScenarioBattle), 0)
def WorldRaidBossGroupExcelAddExclusiveOperatorBossDamaged(builder, ExclusiveOperatorBossDamaged): builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(ExclusiveOperatorBossDamaged), 0)
def WorldRaidBossGroupExcelAddBossGroupOpenCondition(builder, BossGroupOpenCondition): builder.PrependInt64Slot(21, BossGroupOpenCondition, 0)
def WorldRaidBossGroupExcelEnd(builder): return builder.EndObject()
