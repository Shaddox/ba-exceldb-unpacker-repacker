# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterAIExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCharacterAIExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterAIExcel()
        x.Init(buf, n + offset)
        return x

    # CharacterAIExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterAIExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterAIExcel
    def EngageType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterAIExcel
    def Positioning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterAIExcel
    def CheckCanUseAutoSkill(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterAIExcel
    def DistanceReduceRatioObstaclePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterAIExcel
    def DistanceReduceObstaclePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterAIExcel
    def DistanceReduceRatioFormationPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterAIExcel
    def DistanceReduceFormationPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterAIExcel
    def MinimumPositionGap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterAIExcel
    def CanUseObstacleOfKneelMotion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterAIExcel
    def CanUseObstacleOfStandMotion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterAIExcel
    def HasTargetSwitchingMotion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def CharacterAIExcelStart(builder): builder.StartObject(12)
def CharacterAIExcelAddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def CharacterAIExcelAddEngageType(builder, EngageType): builder.PrependInt32Slot(1, EngageType, 0)
def CharacterAIExcelAddPositioning(builder, Positioning): builder.PrependInt32Slot(2, Positioning, 0)
def CharacterAIExcelAddCheckCanUseAutoSkill(builder, CheckCanUseAutoSkill): builder.PrependBoolSlot(3, CheckCanUseAutoSkill, 0)
def CharacterAIExcelAddDistanceReduceRatioObstaclePath(builder, DistanceReduceRatioObstaclePath): builder.PrependInt64Slot(4, DistanceReduceRatioObstaclePath, 0)
def CharacterAIExcelAddDistanceReduceObstaclePath(builder, DistanceReduceObstaclePath): builder.PrependInt64Slot(5, DistanceReduceObstaclePath, 0)
def CharacterAIExcelAddDistanceReduceRatioFormationPath(builder, DistanceReduceRatioFormationPath): builder.PrependInt64Slot(6, DistanceReduceRatioFormationPath, 0)
def CharacterAIExcelAddDistanceReduceFormationPath(builder, DistanceReduceFormationPath): builder.PrependInt64Slot(7, DistanceReduceFormationPath, 0)
def CharacterAIExcelAddMinimumPositionGap(builder, MinimumPositionGap): builder.PrependInt64Slot(8, MinimumPositionGap, 0)
def CharacterAIExcelAddCanUseObstacleOfKneelMotion(builder, CanUseObstacleOfKneelMotion): builder.PrependBoolSlot(9, CanUseObstacleOfKneelMotion, 0)
def CharacterAIExcelAddCanUseObstacleOfStandMotion(builder, CanUseObstacleOfStandMotion): builder.PrependBoolSlot(10, CanUseObstacleOfStandMotion, 0)
def CharacterAIExcelAddHasTargetSwitchingMotion(builder, HasTargetSwitchingMotion): builder.PrependBoolSlot(11, HasTargetSwitchingMotion, 0)
def CharacterAIExcelEnd(builder): return builder.EndObject()
