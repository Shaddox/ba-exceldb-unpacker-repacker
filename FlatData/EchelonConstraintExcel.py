# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EchelonConstraintExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEchelonConstraintExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EchelonConstraintExcel()
        x.Init(buf, n + offset)
        return x

    # EchelonConstraintExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EchelonConstraintExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EchelonConstraintExcel
    def IsWhiteList(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EchelonConstraintExcel
    def CharacterId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EchelonConstraintExcel
    def CharacterIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EchelonConstraintExcel
    def CharacterIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EchelonConstraintExcel
    def CharacterIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # EchelonConstraintExcel
    def PersonalityId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EchelonConstraintExcel
    def PersonalityIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EchelonConstraintExcel
    def PersonalityIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EchelonConstraintExcel
    def PersonalityIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # EchelonConstraintExcel
    def WeaponType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EchelonConstraintExcel
    def School(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EchelonConstraintExcel
    def Club(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EchelonConstraintExcel
    def Role(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def EchelonConstraintExcelStart(builder): builder.StartObject(8)
def EchelonConstraintExcelAddGroupId(builder, GroupId): builder.PrependInt64Slot(0, GroupId, 0)
def EchelonConstraintExcelAddIsWhiteList(builder, IsWhiteList): builder.PrependBoolSlot(1, IsWhiteList, 0)
def EchelonConstraintExcelAddCharacterId(builder, CharacterId): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(CharacterId), 0)
def EchelonConstraintExcelStartCharacterIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def EchelonConstraintExcelAddPersonalityId(builder, PersonalityId): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(PersonalityId), 0)
def EchelonConstraintExcelStartPersonalityIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def EchelonConstraintExcelAddWeaponType(builder, WeaponType): builder.PrependInt32Slot(4, WeaponType, 0)
def EchelonConstraintExcelAddSchool(builder, School): builder.PrependInt32Slot(5, School, 0)
def EchelonConstraintExcelAddClub(builder, Club): builder.PrependInt32Slot(6, Club, 0)
def EchelonConstraintExcelAddRole(builder, Role): builder.PrependInt32Slot(7, Role, 0)
def EchelonConstraintExcelEnd(builder): return builder.EndObject()
