# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CurrencyExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCurrencyExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CurrencyExcel()
        x.Init(buf, n + offset)
        return x

    # CurrencyExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CurrencyExcel
    def ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def CurrencyType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def CurrencyName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CurrencyExcel
    def Icon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CurrencyExcel
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def AutoChargeMsc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def AutoChargeAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def CurrencyOverChargeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def CurrencyAdditionalChargeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def ChargeLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def OverChargeLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def SpriteName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CurrencyExcel
    def DailyRefillType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def DailyRefillAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CurrencyExcel
    def DailyRefillTime(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CurrencyExcel
    def DailyRefillTimeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CurrencyExcel
    def DailyRefillTimeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CurrencyExcel
    def DailyRefillTimeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

def CurrencyExcelStart(builder): builder.StartObject(16)
def CurrencyExcelAddID(builder, ID): builder.PrependInt64Slot(0, ID, 0)
def CurrencyExcelAddLocalizeEtcId(builder, LocalizeEtcId): builder.PrependUint32Slot(1, LocalizeEtcId, 0)
def CurrencyExcelAddCurrencyType(builder, CurrencyType): builder.PrependInt32Slot(2, CurrencyType, 0)
def CurrencyExcelAddCurrencyName(builder, CurrencyName): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(CurrencyName), 0)
def CurrencyExcelAddIcon(builder, Icon): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(Icon), 0)
def CurrencyExcelAddRarity(builder, Rarity): builder.PrependInt32Slot(5, Rarity, 0)
def CurrencyExcelAddAutoChargeMsc(builder, AutoChargeMsc): builder.PrependInt32Slot(6, AutoChargeMsc, 0)
def CurrencyExcelAddAutoChargeAmount(builder, AutoChargeAmount): builder.PrependInt32Slot(7, AutoChargeAmount, 0)
def CurrencyExcelAddCurrencyOverChargeType(builder, CurrencyOverChargeType): builder.PrependInt32Slot(8, CurrencyOverChargeType, 0)
def CurrencyExcelAddCurrencyAdditionalChargeType(builder, CurrencyAdditionalChargeType): builder.PrependInt32Slot(9, CurrencyAdditionalChargeType, 0)
def CurrencyExcelAddChargeLimit(builder, ChargeLimit): builder.PrependInt64Slot(10, ChargeLimit, 0)
def CurrencyExcelAddOverChargeLimit(builder, OverChargeLimit): builder.PrependInt64Slot(11, OverChargeLimit, 0)
def CurrencyExcelAddSpriteName(builder, SpriteName): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(SpriteName), 0)
def CurrencyExcelAddDailyRefillType(builder, DailyRefillType): builder.PrependInt32Slot(13, DailyRefillType, 0)
def CurrencyExcelAddDailyRefillAmount(builder, DailyRefillAmount): builder.PrependInt64Slot(14, DailyRefillAmount, 0)
def CurrencyExcelAddDailyRefillTime(builder, DailyRefillTime): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(DailyRefillTime), 0)
def CurrencyExcelStartDailyRefillTimeVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def CurrencyExcelEnd(builder): return builder.EndObject()
