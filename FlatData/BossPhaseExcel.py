# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BossPhaseExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBossPhaseExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BossPhaseExcel()
        x.Init(buf, n + offset)
        return x

    # BossPhaseExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BossPhaseExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # BossPhaseExcel
    def AIPhase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # BossPhaseExcel
    def NormalAttackSkillUniqueName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BossPhaseExcel
    def UseExSkill(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # BossPhaseExcel
    def UseExSkillAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # BossPhaseExcel
    def UseExSkillLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # BossPhaseExcel
    def UseExSkillIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def BossPhaseExcelStart(builder): builder.StartObject(4)
def BossPhaseExcelAddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def BossPhaseExcelAddAIPhase(builder, AIPhase): builder.PrependInt64Slot(1, AIPhase, 0)
def BossPhaseExcelAddNormalAttackSkillUniqueName(builder, NormalAttackSkillUniqueName): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(NormalAttackSkillUniqueName), 0)
def BossPhaseExcelAddUseExSkill(builder, UseExSkill): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(UseExSkill), 0)
def BossPhaseExcelStartUseExSkillVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def BossPhaseExcelEnd(builder): return builder.EndObject()
