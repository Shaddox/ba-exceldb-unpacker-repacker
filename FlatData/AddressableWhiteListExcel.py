# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AddressableWhiteListExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAddressableWhiteListExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AddressableWhiteListExcel()
        x.Init(buf, n + offset)
        return x

    # AddressableWhiteListExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AddressableWhiteListExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AddressableWhiteListExcel
    def FolderPath(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AddressableWhiteListExcel
    def FolderPathLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AddressableWhiteListExcel
    def FolderPathIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # AddressableWhiteListExcel
    def ResourcePath(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AddressableWhiteListExcel
    def ResourcePathLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AddressableWhiteListExcel
    def ResourcePathIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def AddressableWhiteListExcelStart(builder): builder.StartObject(3)
def AddressableWhiteListExcelAddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def AddressableWhiteListExcelAddFolderPath(builder, FolderPath): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(FolderPath), 0)
def AddressableWhiteListExcelStartFolderPathVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def AddressableWhiteListExcelAddResourcePath(builder, ResourcePath): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(ResourcePath), 0)
def AddressableWhiteListExcelStartResourcePathVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def AddressableWhiteListExcelEnd(builder): return builder.EndObject()
