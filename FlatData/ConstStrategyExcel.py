# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConstStrategyExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsConstStrategyExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConstStrategyExcel()
        x.Init(buf, n + offset)
        return x

    # ConstStrategyExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConstStrategyExcel
    def HexaMapBoundaryOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstStrategyExcel
    def HexaMapStartCameraOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstStrategyExcel
    def CameraZoomMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstStrategyExcel
    def CameraZoomMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstStrategyExcel
    def CameraZoomDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstStrategyExcel
    def HealCostType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstStrategyExcel
    def HealCostAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ConstStrategyExcel
    def HealCostAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ConstStrategyExcel
    def HealCostAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConstStrategyExcel
    def HealCostAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # ConstStrategyExcel
    def CanHealHpRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstStrategyExcel
    def PlayTimeLimitInSeconds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstStrategyExcel
    def AdventureEchelonCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstStrategyExcel
    def RaidEchelonCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstStrategyExcel
    def DefaultEchelonCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstStrategyExcel
    def EventContentEchelonCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstStrategyExcel
    def TimeAttackDungeonEchelonCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstStrategyExcel
    def WorldRaidEchelonCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstStrategyExcel
    def TacticSkipClearTimeSeconds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstStrategyExcel
    def TacticSkipFramePerSecond(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstStrategyExcel
    def ConquestEchelonCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstStrategyExcel
    def StoryEchelonCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstStrategyExcel
    def MultiSweepPresetCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstStrategyExcel
    def MultiSweepPresetNameMaxLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstStrategyExcel
    def MultiSweepPresetSelectStageMaxCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstStrategyExcel
    def MultiSweepPresetMaxSweepCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstStrategyExcel
    def MultiSweepPresetSelectParcelMaxCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ConstStrategyExcelStart(builder): builder.StartObject(24)
def ConstStrategyExcelAddHexaMapBoundaryOffset(builder, HexaMapBoundaryOffset): builder.PrependFloat32Slot(0, HexaMapBoundaryOffset, 0.0)
def ConstStrategyExcelAddHexaMapStartCameraOffset(builder, HexaMapStartCameraOffset): builder.PrependFloat32Slot(1, HexaMapStartCameraOffset, 0.0)
def ConstStrategyExcelAddCameraZoomMax(builder, CameraZoomMax): builder.PrependFloat32Slot(2, CameraZoomMax, 0.0)
def ConstStrategyExcelAddCameraZoomMin(builder, CameraZoomMin): builder.PrependFloat32Slot(3, CameraZoomMin, 0.0)
def ConstStrategyExcelAddCameraZoomDefault(builder, CameraZoomDefault): builder.PrependFloat32Slot(4, CameraZoomDefault, 0.0)
def ConstStrategyExcelAddHealCostType(builder, HealCostType): builder.PrependInt32Slot(5, HealCostType, 0)
def ConstStrategyExcelAddHealCostAmount(builder, HealCostAmount): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(HealCostAmount), 0)
def ConstStrategyExcelStartHealCostAmountVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def ConstStrategyExcelAddCanHealHpRate(builder, CanHealHpRate): builder.PrependInt32Slot(7, CanHealHpRate, 0)
def ConstStrategyExcelAddPlayTimeLimitInSeconds(builder, PlayTimeLimitInSeconds): builder.PrependInt64Slot(8, PlayTimeLimitInSeconds, 0)
def ConstStrategyExcelAddAdventureEchelonCount(builder, AdventureEchelonCount): builder.PrependInt32Slot(9, AdventureEchelonCount, 0)
def ConstStrategyExcelAddRaidEchelonCount(builder, RaidEchelonCount): builder.PrependInt32Slot(10, RaidEchelonCount, 0)
def ConstStrategyExcelAddDefaultEchelonCount(builder, DefaultEchelonCount): builder.PrependInt32Slot(11, DefaultEchelonCount, 0)
def ConstStrategyExcelAddEventContentEchelonCount(builder, EventContentEchelonCount): builder.PrependInt32Slot(12, EventContentEchelonCount, 0)
def ConstStrategyExcelAddTimeAttackDungeonEchelonCount(builder, TimeAttackDungeonEchelonCount): builder.PrependInt32Slot(13, TimeAttackDungeonEchelonCount, 0)
def ConstStrategyExcelAddWorldRaidEchelonCount(builder, WorldRaidEchelonCount): builder.PrependInt32Slot(14, WorldRaidEchelonCount, 0)
def ConstStrategyExcelAddTacticSkipClearTimeSeconds(builder, TacticSkipClearTimeSeconds): builder.PrependInt32Slot(15, TacticSkipClearTimeSeconds, 0)
def ConstStrategyExcelAddTacticSkipFramePerSecond(builder, TacticSkipFramePerSecond): builder.PrependInt32Slot(16, TacticSkipFramePerSecond, 0)
def ConstStrategyExcelAddConquestEchelonCount(builder, ConquestEchelonCount): builder.PrependInt32Slot(17, ConquestEchelonCount, 0)
def ConstStrategyExcelAddStoryEchelonCount(builder, StoryEchelonCount): builder.PrependInt32Slot(18, StoryEchelonCount, 0)
def ConstStrategyExcelAddMultiSweepPresetCount(builder, MultiSweepPresetCount): builder.PrependInt32Slot(19, MultiSweepPresetCount, 0)
def ConstStrategyExcelAddMultiSweepPresetNameMaxLength(builder, MultiSweepPresetNameMaxLength): builder.PrependInt32Slot(20, MultiSweepPresetNameMaxLength, 0)
def ConstStrategyExcelAddMultiSweepPresetSelectStageMaxCount(builder, MultiSweepPresetSelectStageMaxCount): builder.PrependInt32Slot(21, MultiSweepPresetSelectStageMaxCount, 0)
def ConstStrategyExcelAddMultiSweepPresetMaxSweepCount(builder, MultiSweepPresetMaxSweepCount): builder.PrependInt32Slot(22, MultiSweepPresetMaxSweepCount, 0)
def ConstStrategyExcelAddMultiSweepPresetSelectParcelMaxCount(builder, MultiSweepPresetSelectParcelMaxCount): builder.PrependInt32Slot(23, MultiSweepPresetSelectParcelMaxCount, 0)
def ConstStrategyExcelEnd(builder): return builder.EndObject()
