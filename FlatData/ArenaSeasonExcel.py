# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ArenaSeasonExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsArenaSeasonExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ArenaSeasonExcel()
        x.Init(buf, n + offset)
        return x

    # ArenaSeasonExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ArenaSeasonExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ArenaSeasonExcel
    def SeasonStartDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ArenaSeasonExcel
    def SeasonEndDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ArenaSeasonExcel
    def SeasonGroupLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ArenaSeasonExcel
    def PrevSeasonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def ArenaSeasonExcelStart(builder): builder.StartObject(5)
def ArenaSeasonExcelAddUniqueId(builder, UniqueId): builder.PrependInt64Slot(0, UniqueId, 0)
def ArenaSeasonExcelAddSeasonStartDate(builder, SeasonStartDate): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(SeasonStartDate), 0)
def ArenaSeasonExcelAddSeasonEndDate(builder, SeasonEndDate): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(SeasonEndDate), 0)
def ArenaSeasonExcelAddSeasonGroupLimit(builder, SeasonGroupLimit): builder.PrependInt64Slot(3, SeasonGroupLimit, 0)
def ArenaSeasonExcelAddPrevSeasonId(builder, PrevSeasonId): builder.PrependInt64Slot(4, PrevSeasonId, 0)
def ArenaSeasonExcelEnd(builder): return builder.EndObject()
