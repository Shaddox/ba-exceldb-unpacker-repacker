# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BulletArmorDamageFactorExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBulletArmorDamageFactorExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BulletArmorDamageFactorExcel()
        x.Init(buf, n + offset)
        return x

    # BulletArmorDamageFactorExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BulletArmorDamageFactorExcel
    def DamageFactorGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # BulletArmorDamageFactorExcel
    def BulletType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BulletArmorDamageFactorExcel
    def ArmorType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BulletArmorDamageFactorExcel
    def DamageRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # BulletArmorDamageFactorExcel
    def DamageAttribute(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BulletArmorDamageFactorExcel
    def MinDamageRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # BulletArmorDamageFactorExcel
    def MaxDamageRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # BulletArmorDamageFactorExcel
    def ShowHighlightFloater(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def BulletArmorDamageFactorExcelStart(builder): builder.StartObject(8)
def BulletArmorDamageFactorExcelAddDamageFactorGroupId(builder, DamageFactorGroupId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(DamageFactorGroupId), 0)
def BulletArmorDamageFactorExcelAddBulletType(builder, BulletType): builder.PrependInt32Slot(1, BulletType, 0)
def BulletArmorDamageFactorExcelAddArmorType(builder, ArmorType): builder.PrependInt32Slot(2, ArmorType, 0)
def BulletArmorDamageFactorExcelAddDamageRate(builder, DamageRate): builder.PrependInt64Slot(3, DamageRate, 0)
def BulletArmorDamageFactorExcelAddDamageAttribute(builder, DamageAttribute): builder.PrependInt32Slot(4, DamageAttribute, 0)
def BulletArmorDamageFactorExcelAddMinDamageRate(builder, MinDamageRate): builder.PrependInt64Slot(5, MinDamageRate, 0)
def BulletArmorDamageFactorExcelAddMaxDamageRate(builder, MaxDamageRate): builder.PrependInt64Slot(6, MaxDamageRate, 0)
def BulletArmorDamageFactorExcelAddShowHighlightFloater(builder, ShowHighlightFloater): builder.PrependBoolSlot(7, ShowHighlightFloater, 0)
def BulletArmorDamageFactorExcelEnd(builder): return builder.EndObject()
