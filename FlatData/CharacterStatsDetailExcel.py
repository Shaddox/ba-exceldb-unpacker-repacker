# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterStatsDetailExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCharacterStatsDetailExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterStatsDetailExcel()
        x.Init(buf, n + offset)
        return x

    # CharacterStatsDetailExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterStatsDetailExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatsDetailExcel
    def DetailShowStats(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterStatsDetailExcel
    def DetailShowStatsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterStatsDetailExcel
    def DetailShowStatsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterStatsDetailExcel
    def DetailShowStatsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # CharacterStatsDetailExcel
    def IsStatsPercent(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # CharacterStatsDetailExcel
    def IsStatsPercentAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # CharacterStatsDetailExcel
    def IsStatsPercentLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterStatsDetailExcel
    def IsStatsPercentIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def CharacterStatsDetailExcelStart(builder): builder.StartObject(3)
def CharacterStatsDetailExcelAddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def CharacterStatsDetailExcelAddDetailShowStats(builder, DetailShowStats): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(DetailShowStats), 0)
def CharacterStatsDetailExcelStartDetailShowStatsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterStatsDetailExcelAddIsStatsPercent(builder, IsStatsPercent): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(IsStatsPercent), 0)
def CharacterStatsDetailExcelStartIsStatsPercentVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def CharacterStatsDetailExcelEnd(builder): return builder.EndObject()
