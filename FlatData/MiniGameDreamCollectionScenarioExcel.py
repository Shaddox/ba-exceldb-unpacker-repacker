# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameDreamCollectionScenarioExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMiniGameDreamCollectionScenarioExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameDreamCollectionScenarioExcel()
        x.Init(buf, n + offset)
        return x

    # MiniGameDreamCollectionScenarioExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameDreamCollectionScenarioExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamCollectionScenarioExcel
    def IsSkip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # MiniGameDreamCollectionScenarioExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamCollectionScenarioExcel
    def Parameter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MiniGameDreamCollectionScenarioExcel
    def ParameterAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MiniGameDreamCollectionScenarioExcel
    def ParameterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameDreamCollectionScenarioExcel
    def ParameterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # MiniGameDreamCollectionScenarioExcel
    def ParameterAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MiniGameDreamCollectionScenarioExcel
    def ParameterAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MiniGameDreamCollectionScenarioExcel
    def ParameterAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameDreamCollectionScenarioExcel
    def ParameterAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # MiniGameDreamCollectionScenarioExcel
    def ScenarioGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def MiniGameDreamCollectionScenarioExcelStart(builder): builder.StartObject(6)
def MiniGameDreamCollectionScenarioExcelAddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def MiniGameDreamCollectionScenarioExcelAddIsSkip(builder, IsSkip): builder.PrependBoolSlot(1, IsSkip, 0)
def MiniGameDreamCollectionScenarioExcelAddEventContentId(builder, EventContentId): builder.PrependInt64Slot(2, EventContentId, 0)
def MiniGameDreamCollectionScenarioExcelAddParameter(builder, Parameter): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(Parameter), 0)
def MiniGameDreamCollectionScenarioExcelStartParameterVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MiniGameDreamCollectionScenarioExcelAddParameterAmount(builder, ParameterAmount): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(ParameterAmount), 0)
def MiniGameDreamCollectionScenarioExcelStartParameterAmountVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def MiniGameDreamCollectionScenarioExcelAddScenarioGroupId(builder, ScenarioGroupId): builder.PrependInt64Slot(5, ScenarioGroupId, 0)
def MiniGameDreamCollectionScenarioExcelEnd(builder): return builder.EndObject()
