# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OpenConditionExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsOpenConditionExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OpenConditionExcel()
        x.Init(buf, n + offset)
        return x

    # OpenConditionExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OpenConditionExcel
    def OpenConditionContentType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def LockUI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OpenConditionExcel
    def LockUILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OpenConditionExcel
    def LockUIIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # OpenConditionExcel
    def ShortcutPopupPriority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def ShortcutUIName(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # OpenConditionExcel
    def ShortcutUINameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OpenConditionExcel
    def ShortcutUINameIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # OpenConditionExcel
    def ShortcutParam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def Scene(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OpenConditionExcel
    def HideWhenLocked(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # OpenConditionExcel
    def AccountLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def ScenarioModeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def CampaignStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def MultipleConditionCheckType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def OpenDayOfWeek(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def OpenHour(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def CloseDayOfWeek(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def CloseHour(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def OpenedCafeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def CafeIdforCafeRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def CafeRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OpenConditionExcel
    def ContentsOpenShow(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # OpenConditionExcel
    def ContentsOpenShortcutUI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def OpenConditionExcelStart(builder): builder.StartObject(20)
def OpenConditionExcelAddOpenConditionContentType(builder, OpenConditionContentType): builder.PrependInt32Slot(0, OpenConditionContentType, 0)
def OpenConditionExcelAddLockUI(builder, LockUI): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(LockUI), 0)
def OpenConditionExcelStartLockUIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OpenConditionExcelAddShortcutPopupPriority(builder, ShortcutPopupPriority): builder.PrependInt64Slot(2, ShortcutPopupPriority, 0)
def OpenConditionExcelAddShortcutUIName(builder, ShortcutUIName): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(ShortcutUIName), 0)
def OpenConditionExcelStartShortcutUINameVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OpenConditionExcelAddShortcutParam(builder, ShortcutParam): builder.PrependInt32Slot(4, ShortcutParam, 0)
def OpenConditionExcelAddScene(builder, Scene): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(Scene), 0)
def OpenConditionExcelAddHideWhenLocked(builder, HideWhenLocked): builder.PrependBoolSlot(6, HideWhenLocked, 0)
def OpenConditionExcelAddAccountLevel(builder, AccountLevel): builder.PrependInt64Slot(7, AccountLevel, 0)
def OpenConditionExcelAddScenarioModeId(builder, ScenarioModeId): builder.PrependInt64Slot(8, ScenarioModeId, 0)
def OpenConditionExcelAddCampaignStageId(builder, CampaignStageId): builder.PrependInt64Slot(9, CampaignStageId, 0)
def OpenConditionExcelAddMultipleConditionCheckType(builder, MultipleConditionCheckType): builder.PrependInt32Slot(10, MultipleConditionCheckType, 0)
def OpenConditionExcelAddOpenDayOfWeek(builder, OpenDayOfWeek): builder.PrependInt32Slot(11, OpenDayOfWeek, 0)
def OpenConditionExcelAddOpenHour(builder, OpenHour): builder.PrependInt64Slot(12, OpenHour, 0)
def OpenConditionExcelAddCloseDayOfWeek(builder, CloseDayOfWeek): builder.PrependInt32Slot(13, CloseDayOfWeek, 0)
def OpenConditionExcelAddCloseHour(builder, CloseHour): builder.PrependInt64Slot(14, CloseHour, 0)
def OpenConditionExcelAddOpenedCafeId(builder, OpenedCafeId): builder.PrependInt64Slot(15, OpenedCafeId, 0)
def OpenConditionExcelAddCafeIdforCafeRank(builder, CafeIdforCafeRank): builder.PrependInt64Slot(16, CafeIdforCafeRank, 0)
def OpenConditionExcelAddCafeRank(builder, CafeRank): builder.PrependInt64Slot(17, CafeRank, 0)
def OpenConditionExcelAddContentsOpenShow(builder, ContentsOpenShow): builder.PrependBoolSlot(18, ContentsOpenShow, 0)
def OpenConditionExcelAddContentsOpenShortcutUI(builder, ContentsOpenShortcutUI): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(ContentsOpenShortcutUI), 0)
def OpenConditionExcelEnd(builder): return builder.EndObject()
