# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class DuplicateBonusExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDuplicateBonusExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DuplicateBonusExcel()
        x.Init(buf, n + offset)
        return x

    # DuplicateBonusExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DuplicateBonusExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # DuplicateBonusExcel
    def ItemCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DuplicateBonusExcel
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # DuplicateBonusExcel
    def CharacterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # DuplicateBonusExcel
    def RewardParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DuplicateBonusExcel
    def RewardParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # DuplicateBonusExcel
    def RewardParcelAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def DuplicateBonusExcelStart(builder): builder.StartObject(7)
def DuplicateBonusExcelAddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def DuplicateBonusExcelAddItemCategory(builder, ItemCategory): builder.PrependInt32Slot(1, ItemCategory, 0)
def DuplicateBonusExcelAddItemId(builder, ItemId): builder.PrependInt64Slot(2, ItemId, 0)
def DuplicateBonusExcelAddCharacterId(builder, CharacterId): builder.PrependInt64Slot(3, CharacterId, 0)
def DuplicateBonusExcelAddRewardParcelType(builder, RewardParcelType): builder.PrependInt32Slot(4, RewardParcelType, 0)
def DuplicateBonusExcelAddRewardParcelId(builder, RewardParcelId): builder.PrependInt64Slot(5, RewardParcelId, 0)
def DuplicateBonusExcelAddRewardParcelAmount(builder, RewardParcelAmount): builder.PrependInt64Slot(6, RewardParcelAmount, 0)
def DuplicateBonusExcelEnd(builder): return builder.EndObject()
