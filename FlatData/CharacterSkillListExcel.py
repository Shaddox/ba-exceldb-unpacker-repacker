# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterSkillListExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCharacterSkillListExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterSkillListExcel()
        x.Init(buf, n + offset)
        return x

    # CharacterSkillListExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterSkillListExcel
    def CharacterSkillListGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterSkillListExcel
    def MinimumGradeCharacterWeapon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterSkillListExcel
    def MinimumTierCharacterGear(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterSkillListExcel
    def FormIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterSkillListExcel
    def IsRootMotion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterSkillListExcel
    def IsMoveLeftRight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterSkillListExcel
    def UseRandomExSkillTimeline(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterSkillListExcel
    def TSAInteractionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterSkillListExcel
    def NormalSkillGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterSkillListExcel
    def NormalSkillGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterSkillListExcel
    def NormalSkillGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # CharacterSkillListExcel
    def NormalSkillTimeLineIndex(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterSkillListExcel
    def NormalSkillTimeLineIndexAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterSkillListExcel
    def NormalSkillTimeLineIndexLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterSkillListExcel
    def NormalSkillTimeLineIndexIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # CharacterSkillListExcel
    def ExSkillGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterSkillListExcel
    def ExSkillGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterSkillListExcel
    def ExSkillGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # CharacterSkillListExcel
    def ExSkillCutInTimeLineIndex(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterSkillListExcel
    def ExSkillCutInTimeLineIndexLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterSkillListExcel
    def ExSkillCutInTimeLineIndexIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # CharacterSkillListExcel
    def ExSkillLevelTimeLineIndex(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterSkillListExcel
    def ExSkillLevelTimeLineIndexLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterSkillListExcel
    def ExSkillLevelTimeLineIndexIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # CharacterSkillListExcel
    def PublicSkillGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterSkillListExcel
    def PublicSkillGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterSkillListExcel
    def PublicSkillGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # CharacterSkillListExcel
    def PublicSkillTimeLineIndex(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterSkillListExcel
    def PublicSkillTimeLineIndexAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterSkillListExcel
    def PublicSkillTimeLineIndexLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterSkillListExcel
    def PublicSkillTimeLineIndexIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # CharacterSkillListExcel
    def PassiveSkillGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterSkillListExcel
    def PassiveSkillGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterSkillListExcel
    def PassiveSkillGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # CharacterSkillListExcel
    def LeaderSkillGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterSkillListExcel
    def LeaderSkillGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterSkillListExcel
    def LeaderSkillGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # CharacterSkillListExcel
    def ExtraPassiveSkillGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterSkillListExcel
    def ExtraPassiveSkillGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterSkillListExcel
    def ExtraPassiveSkillGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # CharacterSkillListExcel
    def HiddenPassiveSkillGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterSkillListExcel
    def HiddenPassiveSkillGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterSkillListExcel
    def HiddenPassiveSkillGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

def CharacterSkillListExcelStart(builder): builder.StartObject(19)
def CharacterSkillListExcelAddCharacterSkillListGroupId(builder, CharacterSkillListGroupId): builder.PrependInt64Slot(0, CharacterSkillListGroupId, 0)
def CharacterSkillListExcelAddMinimumGradeCharacterWeapon(builder, MinimumGradeCharacterWeapon): builder.PrependInt32Slot(1, MinimumGradeCharacterWeapon, 0)
def CharacterSkillListExcelAddMinimumTierCharacterGear(builder, MinimumTierCharacterGear): builder.PrependInt32Slot(2, MinimumTierCharacterGear, 0)
def CharacterSkillListExcelAddFormIndex(builder, FormIndex): builder.PrependInt32Slot(3, FormIndex, 0)
def CharacterSkillListExcelAddIsRootMotion(builder, IsRootMotion): builder.PrependBoolSlot(4, IsRootMotion, 0)
def CharacterSkillListExcelAddIsMoveLeftRight(builder, IsMoveLeftRight): builder.PrependBoolSlot(5, IsMoveLeftRight, 0)
def CharacterSkillListExcelAddUseRandomExSkillTimeline(builder, UseRandomExSkillTimeline): builder.PrependBoolSlot(6, UseRandomExSkillTimeline, 0)
def CharacterSkillListExcelAddTSAInteractionId(builder, TSAInteractionId): builder.PrependInt64Slot(7, TSAInteractionId, 0)
def CharacterSkillListExcelAddNormalSkillGroupId(builder, NormalSkillGroupId): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(NormalSkillGroupId), 0)
def CharacterSkillListExcelStartNormalSkillGroupIdVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterSkillListExcelAddNormalSkillTimeLineIndex(builder, NormalSkillTimeLineIndex): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(NormalSkillTimeLineIndex), 0)
def CharacterSkillListExcelStartNormalSkillTimeLineIndexVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterSkillListExcelAddExSkillGroupId(builder, ExSkillGroupId): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(ExSkillGroupId), 0)
def CharacterSkillListExcelStartExSkillGroupIdVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterSkillListExcelAddExSkillCutInTimeLineIndex(builder, ExSkillCutInTimeLineIndex): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(ExSkillCutInTimeLineIndex), 0)
def CharacterSkillListExcelStartExSkillCutInTimeLineIndexVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterSkillListExcelAddExSkillLevelTimeLineIndex(builder, ExSkillLevelTimeLineIndex): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(ExSkillLevelTimeLineIndex), 0)
def CharacterSkillListExcelStartExSkillLevelTimeLineIndexVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterSkillListExcelAddPublicSkillGroupId(builder, PublicSkillGroupId): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(PublicSkillGroupId), 0)
def CharacterSkillListExcelStartPublicSkillGroupIdVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterSkillListExcelAddPublicSkillTimeLineIndex(builder, PublicSkillTimeLineIndex): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(PublicSkillTimeLineIndex), 0)
def CharacterSkillListExcelStartPublicSkillTimeLineIndexVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterSkillListExcelAddPassiveSkillGroupId(builder, PassiveSkillGroupId): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(PassiveSkillGroupId), 0)
def CharacterSkillListExcelStartPassiveSkillGroupIdVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterSkillListExcelAddLeaderSkillGroupId(builder, LeaderSkillGroupId): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(LeaderSkillGroupId), 0)
def CharacterSkillListExcelStartLeaderSkillGroupIdVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterSkillListExcelAddExtraPassiveSkillGroupId(builder, ExtraPassiveSkillGroupId): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(ExtraPassiveSkillGroupId), 0)
def CharacterSkillListExcelStartExtraPassiveSkillGroupIdVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterSkillListExcelAddHiddenPassiveSkillGroupId(builder, HiddenPassiveSkillGroupId): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(HiddenPassiveSkillGroupId), 0)
def CharacterSkillListExcelStartHiddenPassiveSkillGroupIdVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterSkillListExcelEnd(builder): return builder.EndObject()
