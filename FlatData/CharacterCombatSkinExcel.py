# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterCombatSkinExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCharacterCombatSkinExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterCombatSkinExcel()
        x.Init(buf, n + offset)
        return x

    # CharacterCombatSkinExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterCombatSkinExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterCombatSkinExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterCombatSkinExcel
    def ResourcePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def CharacterCombatSkinExcelStart(builder): builder.StartObject(3)
def CharacterCombatSkinExcelAddGroupId(builder, GroupId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(GroupId), 0)
def CharacterCombatSkinExcelAddUniqueId(builder, UniqueId): builder.PrependInt64Slot(1, UniqueId, 0)
def CharacterCombatSkinExcelAddResourcePath(builder, ResourcePath): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(ResourcePath), 0)
def CharacterCombatSkinExcelEnd(builder): return builder.EndObject()
