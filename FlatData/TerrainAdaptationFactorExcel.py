# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TerrainAdaptationFactorExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTerrainAdaptationFactorExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TerrainAdaptationFactorExcel()
        x.Init(buf, n + offset)
        return x

    # TerrainAdaptationFactorExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TerrainAdaptationFactorExcel
    def TerrainAdaptation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TerrainAdaptationFactorExcel
    def TerrainAdaptationStat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TerrainAdaptationFactorExcel
    def ShotFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TerrainAdaptationFactorExcel
    def BlockFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TerrainAdaptationFactorExcel
    def AccuracyFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TerrainAdaptationFactorExcel
    def DodgeFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TerrainAdaptationFactorExcel
    def AttackPowerFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def TerrainAdaptationFactorExcelStart(builder): builder.StartObject(7)
def TerrainAdaptationFactorExcelAddTerrainAdaptation(builder, TerrainAdaptation): builder.PrependInt32Slot(0, TerrainAdaptation, 0)
def TerrainAdaptationFactorExcelAddTerrainAdaptationStat(builder, TerrainAdaptationStat): builder.PrependInt32Slot(1, TerrainAdaptationStat, 0)
def TerrainAdaptationFactorExcelAddShotFactor(builder, ShotFactor): builder.PrependInt64Slot(2, ShotFactor, 0)
def TerrainAdaptationFactorExcelAddBlockFactor(builder, BlockFactor): builder.PrependInt64Slot(3, BlockFactor, 0)
def TerrainAdaptationFactorExcelAddAccuracyFactor(builder, AccuracyFactor): builder.PrependInt64Slot(4, AccuracyFactor, 0)
def TerrainAdaptationFactorExcelAddDodgeFactor(builder, DodgeFactor): builder.PrependInt64Slot(5, DodgeFactor, 0)
def TerrainAdaptationFactorExcelAddAttackPowerFactor(builder, AttackPowerFactor): builder.PrependInt64Slot(6, AttackPowerFactor, 0)
def TerrainAdaptationFactorExcelEnd(builder): return builder.EndObject()
