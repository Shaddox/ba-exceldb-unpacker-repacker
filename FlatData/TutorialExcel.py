# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TutorialExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTutorialExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TutorialExcel()
        x.Init(buf, n + offset)
        return x

    # TutorialExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TutorialExcel
    def ID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TutorialExcel
    def CompletionReportEventName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TutorialExcel
    def CompulsoryTutorial(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # TutorialExcel
    def DescriptionTutorial(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # TutorialExcel
    def TutorialStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TutorialExcel
    def UIName(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TutorialExcel
    def UINameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TutorialExcel
    def UINameIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # TutorialExcel
    def TutorialParentName(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TutorialExcel
    def TutorialParentNameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TutorialExcel
    def TutorialParentNameIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def TutorialExcelStart(builder): builder.StartObject(7)
def TutorialExcelAddID(builder, ID): builder.PrependInt64Slot(0, ID, 0)
def TutorialExcelAddCompletionReportEventName(builder, CompletionReportEventName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(CompletionReportEventName), 0)
def TutorialExcelAddCompulsoryTutorial(builder, CompulsoryTutorial): builder.PrependBoolSlot(2, CompulsoryTutorial, 0)
def TutorialExcelAddDescriptionTutorial(builder, DescriptionTutorial): builder.PrependBoolSlot(3, DescriptionTutorial, 0)
def TutorialExcelAddTutorialStageId(builder, TutorialStageId): builder.PrependInt64Slot(4, TutorialStageId, 0)
def TutorialExcelAddUIName(builder, UIName): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(UIName), 0)
def TutorialExcelStartUINameVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TutorialExcelAddTutorialParentName(builder, TutorialParentName): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(TutorialParentName), 0)
def TutorialExcelStartTutorialParentNameVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TutorialExcelEnd(builder): return builder.EndObject()
