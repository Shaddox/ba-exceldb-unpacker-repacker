# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameDreamDailyPointExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMiniGameDreamDailyPointExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameDreamDailyPointExcel()
        x.Init(buf, n + offset)
        return x

    # MiniGameDreamDailyPointExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameDreamDailyPointExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamDailyPointExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamDailyPointExcel
    def TotalParameterMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamDailyPointExcel
    def TotalParameterMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamDailyPointExcel
    def DailyPointCoefficient(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamDailyPointExcel
    def DailyPointCorrectionValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def MiniGameDreamDailyPointExcelStart(builder): builder.StartObject(6)
def MiniGameDreamDailyPointExcelAddUniqueId(builder, UniqueId): builder.PrependInt64Slot(0, UniqueId, 0)
def MiniGameDreamDailyPointExcelAddEventContentId(builder, EventContentId): builder.PrependInt64Slot(1, EventContentId, 0)
def MiniGameDreamDailyPointExcelAddTotalParameterMin(builder, TotalParameterMin): builder.PrependInt64Slot(2, TotalParameterMin, 0)
def MiniGameDreamDailyPointExcelAddTotalParameterMax(builder, TotalParameterMax): builder.PrependInt64Slot(3, TotalParameterMax, 0)
def MiniGameDreamDailyPointExcelAddDailyPointCoefficient(builder, DailyPointCoefficient): builder.PrependInt64Slot(4, DailyPointCoefficient, 0)
def MiniGameDreamDailyPointExcelAddDailyPointCorrectionValue(builder, DailyPointCorrectionValue): builder.PrependInt64Slot(5, DailyPointCorrectionValue, 0)
def MiniGameDreamDailyPointExcelEnd(builder): return builder.EndObject()
