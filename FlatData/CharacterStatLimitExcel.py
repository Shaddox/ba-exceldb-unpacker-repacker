# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterStatLimitExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCharacterStatLimitExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterStatLimitExcel()
        x.Init(buf, n + offset)
        return x

    # CharacterStatLimitExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterStatLimitExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatLimitExcel
    def TacticEntityType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatLimitExcel
    def StatType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatLimitExcel
    def StatMinValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatLimitExcel
    def StatMaxValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatLimitExcel
    def StatRatioMinValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatLimitExcel
    def StatRatioMaxValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def CharacterStatLimitExcelStart(builder): builder.StartObject(7)
def CharacterStatLimitExcelAddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def CharacterStatLimitExcelAddTacticEntityType(builder, TacticEntityType): builder.PrependInt32Slot(1, TacticEntityType, 0)
def CharacterStatLimitExcelAddStatType(builder, StatType): builder.PrependInt32Slot(2, StatType, 0)
def CharacterStatLimitExcelAddStatMinValue(builder, StatMinValue): builder.PrependInt64Slot(3, StatMinValue, 0)
def CharacterStatLimitExcelAddStatMaxValue(builder, StatMaxValue): builder.PrependInt64Slot(4, StatMaxValue, 0)
def CharacterStatLimitExcelAddStatRatioMinValue(builder, StatRatioMinValue): builder.PrependInt64Slot(5, StatRatioMinValue, 0)
def CharacterStatLimitExcelAddStatRatioMaxValue(builder, StatRatioMaxValue): builder.PrependInt64Slot(6, StatRatioMaxValue, 0)
def CharacterStatLimitExcelEnd(builder): return builder.EndObject()
