# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MemoryLobby_GlobalExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMemoryLobby_GlobalExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MemoryLobby_GlobalExcel()
        x.Init(buf, n + offset)
        return x

    # MemoryLobby_GlobalExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MemoryLobby_GlobalExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MemoryLobby_GlobalExcel
    def CharacterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MemoryLobby_GlobalExcel
    def PrefabNameKr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MemoryLobby_GlobalExcel
    def PrefabNameTw(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MemoryLobby_GlobalExcel
    def PrefabNameAsia(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MemoryLobby_GlobalExcel
    def PrefabNameNa(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MemoryLobby_GlobalExcel
    def PrefabNameGlobal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MemoryLobby_GlobalExcel
    def PrefabNameTeen(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def MemoryLobby_GlobalExcelStart(builder): builder.StartObject(8)
def MemoryLobby_GlobalExcelAddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def MemoryLobby_GlobalExcelAddCharacterId(builder, CharacterId): builder.PrependInt64Slot(1, CharacterId, 0)
def MemoryLobby_GlobalExcelAddPrefabNameKr(builder, PrefabNameKr): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(PrefabNameKr), 0)
def MemoryLobby_GlobalExcelAddPrefabNameTw(builder, PrefabNameTw): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(PrefabNameTw), 0)
def MemoryLobby_GlobalExcelAddPrefabNameAsia(builder, PrefabNameAsia): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(PrefabNameAsia), 0)
def MemoryLobby_GlobalExcelAddPrefabNameNa(builder, PrefabNameNa): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(PrefabNameNa), 0)
def MemoryLobby_GlobalExcelAddPrefabNameGlobal(builder, PrefabNameGlobal): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(PrefabNameGlobal), 0)
def MemoryLobby_GlobalExcelAddPrefabNameTeen(builder, PrefabNameTeen): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(PrefabNameTeen), 0)
def MemoryLobby_GlobalExcelEnd(builder): return builder.EndObject()
