# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterAcademyTagsExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCharacterAcademyTagsExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterAcademyTagsExcel()
        x.Init(buf, n + offset)
        return x

    # CharacterAcademyTagsExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterAcademyTagsExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterAcademyTagsExcel
    def FavorTags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterAcademyTagsExcel
    def FavorTagsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterAcademyTagsExcel
    def FavorTagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterAcademyTagsExcel
    def FavorTagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # CharacterAcademyTagsExcel
    def FavorItemTags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterAcademyTagsExcel
    def FavorItemTagsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterAcademyTagsExcel
    def FavorItemTagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterAcademyTagsExcel
    def FavorItemTagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # CharacterAcademyTagsExcel
    def FavorItemUniqueTags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterAcademyTagsExcel
    def FavorItemUniqueTagsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterAcademyTagsExcel
    def FavorItemUniqueTagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterAcademyTagsExcel
    def FavorItemUniqueTagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # CharacterAcademyTagsExcel
    def ForbiddenTags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterAcademyTagsExcel
    def ForbiddenTagsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterAcademyTagsExcel
    def ForbiddenTagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterAcademyTagsExcel
    def ForbiddenTagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # CharacterAcademyTagsExcel
    def ZoneWhiteListTags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterAcademyTagsExcel
    def ZoneWhiteListTagsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterAcademyTagsExcel
    def ZoneWhiteListTagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterAcademyTagsExcel
    def ZoneWhiteListTagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def CharacterAcademyTagsExcelStart(builder): builder.StartObject(6)
def CharacterAcademyTagsExcelAddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def CharacterAcademyTagsExcelAddFavorTags(builder, FavorTags): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(FavorTags), 0)
def CharacterAcademyTagsExcelStartFavorTagsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterAcademyTagsExcelAddFavorItemTags(builder, FavorItemTags): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(FavorItemTags), 0)
def CharacterAcademyTagsExcelStartFavorItemTagsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterAcademyTagsExcelAddFavorItemUniqueTags(builder, FavorItemUniqueTags): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(FavorItemUniqueTags), 0)
def CharacterAcademyTagsExcelStartFavorItemUniqueTagsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterAcademyTagsExcelAddForbiddenTags(builder, ForbiddenTags): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(ForbiddenTags), 0)
def CharacterAcademyTagsExcelStartForbiddenTagsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterAcademyTagsExcelAddZoneWhiteListTags(builder, ZoneWhiteListTags): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(ZoneWhiteListTags), 0)
def CharacterAcademyTagsExcelStartZoneWhiteListTagsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterAcademyTagsExcelEnd(builder): return builder.EndObject()
