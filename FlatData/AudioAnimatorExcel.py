# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AudioAnimatorExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAudioAnimatorExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AudioAnimatorExcel()
        x.Init(buf, n + offset)
        return x

    # AudioAnimatorExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AudioAnimatorExcel
    def ControllerNameHash(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # AudioAnimatorExcel
    def VoiceNamePrefix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AudioAnimatorExcel
    def StateNameHash(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # AudioAnimatorExcel
    def StateName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AudioAnimatorExcel
    def IgnoreInterruptDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AudioAnimatorExcel
    def IgnoreInterruptPlay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AudioAnimatorExcel
    def Volume(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AudioAnimatorExcel
    def Delay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AudioAnimatorExcel
    def RandomPitchMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AudioAnimatorExcel
    def RandomPitchMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AudioAnimatorExcel
    def AudioPriority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AudioAnimatorExcel
    def AudioClipPath(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AudioAnimatorExcel
    def AudioClipPathLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AudioAnimatorExcel
    def AudioClipPathIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # AudioAnimatorExcel
    def VoiceHash(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # AudioAnimatorExcel
    def VoiceHashAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # AudioAnimatorExcel
    def VoiceHashLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AudioAnimatorExcel
    def VoiceHashIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

def AudioAnimatorExcelStart(builder): builder.StartObject(13)
def AudioAnimatorExcelAddControllerNameHash(builder, ControllerNameHash): builder.PrependUint32Slot(0, ControllerNameHash, 0)
def AudioAnimatorExcelAddVoiceNamePrefix(builder, VoiceNamePrefix): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(VoiceNamePrefix), 0)
def AudioAnimatorExcelAddStateNameHash(builder, StateNameHash): builder.PrependUint32Slot(2, StateNameHash, 0)
def AudioAnimatorExcelAddStateName(builder, StateName): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(StateName), 0)
def AudioAnimatorExcelAddIgnoreInterruptDelay(builder, IgnoreInterruptDelay): builder.PrependBoolSlot(4, IgnoreInterruptDelay, 0)
def AudioAnimatorExcelAddIgnoreInterruptPlay(builder, IgnoreInterruptPlay): builder.PrependBoolSlot(5, IgnoreInterruptPlay, 0)
def AudioAnimatorExcelAddVolume(builder, Volume): builder.PrependFloat32Slot(6, Volume, 0.0)
def AudioAnimatorExcelAddDelay(builder, Delay): builder.PrependFloat32Slot(7, Delay, 0.0)
def AudioAnimatorExcelAddRandomPitchMin(builder, RandomPitchMin): builder.PrependInt32Slot(8, RandomPitchMin, 0)
def AudioAnimatorExcelAddRandomPitchMax(builder, RandomPitchMax): builder.PrependInt32Slot(9, RandomPitchMax, 0)
def AudioAnimatorExcelAddAudioPriority(builder, AudioPriority): builder.PrependInt32Slot(10, AudioPriority, 0)
def AudioAnimatorExcelAddAudioClipPath(builder, AudioClipPath): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(AudioClipPath), 0)
def AudioAnimatorExcelStartAudioClipPathVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def AudioAnimatorExcelAddVoiceHash(builder, VoiceHash): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(VoiceHash), 0)
def AudioAnimatorExcelStartVoiceHashVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def AudioAnimatorExcelEnd(builder): return builder.EndObject()
