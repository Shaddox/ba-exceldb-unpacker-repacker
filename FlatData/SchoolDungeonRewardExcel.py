# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SchoolDungeonRewardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSchoolDungeonRewardExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SchoolDungeonRewardExcel()
        x.Init(buf, n + offset)
        return x

    # SchoolDungeonRewardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SchoolDungeonRewardExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # SchoolDungeonRewardExcel
    def DungeonType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SchoolDungeonRewardExcel
    def RewardTag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SchoolDungeonRewardExcel
    def RewardParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SchoolDungeonRewardExcel
    def RewardParcelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # SchoolDungeonRewardExcel
    def RewardParcelAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # SchoolDungeonRewardExcel
    def RewardParcelProbability(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # SchoolDungeonRewardExcel
    def IsDisplayed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def SchoolDungeonRewardExcelStart(builder): builder.StartObject(8)
def SchoolDungeonRewardExcelAddGroupId(builder, GroupId): builder.PrependInt64Slot(0, GroupId, 0)
def SchoolDungeonRewardExcelAddDungeonType(builder, DungeonType): builder.PrependInt32Slot(1, DungeonType, 0)
def SchoolDungeonRewardExcelAddRewardTag(builder, RewardTag): builder.PrependInt32Slot(2, RewardTag, 0)
def SchoolDungeonRewardExcelAddRewardParcelType(builder, RewardParcelType): builder.PrependInt32Slot(3, RewardParcelType, 0)
def SchoolDungeonRewardExcelAddRewardParcelId(builder, RewardParcelId): builder.PrependInt64Slot(4, RewardParcelId, 0)
def SchoolDungeonRewardExcelAddRewardParcelAmount(builder, RewardParcelAmount): builder.PrependInt64Slot(5, RewardParcelAmount, 0)
def SchoolDungeonRewardExcelAddRewardParcelProbability(builder, RewardParcelProbability): builder.PrependInt64Slot(6, RewardParcelProbability, 0)
def SchoolDungeonRewardExcelAddIsDisplayed(builder, IsDisplayed): builder.PrependBoolSlot(7, IsDisplayed, 0)
def SchoolDungeonRewardExcelEnd(builder): return builder.EndObject()
