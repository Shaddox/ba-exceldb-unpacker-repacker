# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GachaCraftNodeGroupExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsGachaCraftNodeGroupExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GachaCraftNodeGroupExcel()
        x.Init(buf, n + offset)
        return x

    # GachaCraftNodeGroupExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GachaCraftNodeGroupExcel
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GachaCraftNodeGroupExcel
    def GachaGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # GachaCraftNodeGroupExcel
    def ProbWeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def GachaCraftNodeGroupExcelStart(builder): builder.StartObject(3)
def GachaCraftNodeGroupExcelAddNodeId(builder, NodeId): builder.PrependInt64Slot(0, NodeId, 0)
def GachaCraftNodeGroupExcelAddGachaGroupId(builder, GachaGroupId): builder.PrependInt64Slot(1, GachaGroupId, 0)
def GachaCraftNodeGroupExcelAddProbWeight(builder, ProbWeight): builder.PrependInt64Slot(2, ProbWeight, 0)
def GachaCraftNodeGroupExcelEnd(builder): return builder.EndObject()
