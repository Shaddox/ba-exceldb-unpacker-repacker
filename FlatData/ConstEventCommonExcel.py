# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConstEventCommonExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsConstEventCommonExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConstEventCommonExcel()
        x.Init(buf, n + offset)
        return x

    # ConstEventCommonExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConstEventCommonExcel
    def EventContentHardStageCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstEventCommonExcel
    def EventStrategyPlayTimeLimitInSeconds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstEventCommonExcel
    def SubEventChangeLimitSeconds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstEventCommonExcel
    def SubEventInstantClear(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ConstEventCommonExcel
    def CardShopProbWeightCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstEventCommonExcel
    def CardShopProbWeightRarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstEventCommonExcel
    def MeetupScenarioReplayResource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConstEventCommonExcel
    def MeetupScenarioReplayTitleLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConstEventCommonExcel
    def SpecialOperactionCollectionGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstEventCommonExcel
    def TreasureNormalVariationAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstEventCommonExcel
    def TreasureLoopVariationAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstEventCommonExcel
    def TreasureLimitVariationLoopCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstEventCommonExcel
    def TreasureLimitVariationClearLoopCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ConstEventCommonExcelStart(builder): builder.StartObject(13)
def ConstEventCommonExcelAddEventContentHardStageCount(builder, EventContentHardStageCount): builder.PrependInt32Slot(0, EventContentHardStageCount, 0)
def ConstEventCommonExcelAddEventStrategyPlayTimeLimitInSeconds(builder, EventStrategyPlayTimeLimitInSeconds): builder.PrependInt64Slot(1, EventStrategyPlayTimeLimitInSeconds, 0)
def ConstEventCommonExcelAddSubEventChangeLimitSeconds(builder, SubEventChangeLimitSeconds): builder.PrependInt64Slot(2, SubEventChangeLimitSeconds, 0)
def ConstEventCommonExcelAddSubEventInstantClear(builder, SubEventInstantClear): builder.PrependBoolSlot(3, SubEventInstantClear, 0)
def ConstEventCommonExcelAddCardShopProbWeightCount(builder, CardShopProbWeightCount): builder.PrependInt64Slot(4, CardShopProbWeightCount, 0)
def ConstEventCommonExcelAddCardShopProbWeightRarity(builder, CardShopProbWeightRarity): builder.PrependInt32Slot(5, CardShopProbWeightRarity, 0)
def ConstEventCommonExcelAddMeetupScenarioReplayResource(builder, MeetupScenarioReplayResource): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(MeetupScenarioReplayResource), 0)
def ConstEventCommonExcelAddMeetupScenarioReplayTitleLocalize(builder, MeetupScenarioReplayTitleLocalize): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(MeetupScenarioReplayTitleLocalize), 0)
def ConstEventCommonExcelAddSpecialOperactionCollectionGroupId(builder, SpecialOperactionCollectionGroupId): builder.PrependInt64Slot(8, SpecialOperactionCollectionGroupId, 0)
def ConstEventCommonExcelAddTreasureNormalVariationAmount(builder, TreasureNormalVariationAmount): builder.PrependInt32Slot(9, TreasureNormalVariationAmount, 0)
def ConstEventCommonExcelAddTreasureLoopVariationAmount(builder, TreasureLoopVariationAmount): builder.PrependInt32Slot(10, TreasureLoopVariationAmount, 0)
def ConstEventCommonExcelAddTreasureLimitVariationLoopCount(builder, TreasureLimitVariationLoopCount): builder.PrependInt32Slot(11, TreasureLimitVariationLoopCount, 0)
def ConstEventCommonExcelAddTreasureLimitVariationClearLoopCount(builder, TreasureLimitVariationClearLoopCount): builder.PrependInt32Slot(12, TreasureLimitVariationClearLoopCount, 0)
def ConstEventCommonExcelEnd(builder): return builder.EndObject()
