# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BlendInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBlendInfo(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BlendInfo()
        x.Init(buf, n + offset)
        return x

    # BlendInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BlendInfo
    def From(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BlendInfo
    def To(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BlendInfo
    def Blend(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def BlendInfoStart(builder): builder.StartObject(3)
def BlendInfoAddFrom(builder, From): builder.PrependInt32Slot(0, From, 0)
def BlendInfoAddTo(builder, To): builder.PrependInt32Slot(1, To, 0)
def BlendInfoAddBlend(builder, Blend): builder.PrependFloat32Slot(2, Blend, 0.0)
def BlendInfoEnd(builder): return builder.EndObject()
