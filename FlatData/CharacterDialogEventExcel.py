# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterDialogEventExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCharacterDialogEventExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterDialogEventExcel()
        x.Init(buf, n + offset)
        return x

    # CharacterDialogEventExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterDialogEventExcel
    def CostumeUniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterDialogEventExcel
    def OriginalCharacterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterDialogEventExcel
    def DisplayOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterDialogEventExcel
    def EventID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterDialogEventExcel
    def ProductionStep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterDialogEventExcel
    def DialogCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterDialogEventExcel
    def DialogCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterDialogEventExcel
    def DialogConditionDetail(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterDialogEventExcel
    def DialogConditionDetailValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterDialogEventExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterDialogEventExcel
    def DialogType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterDialogEventExcel
    def ActionName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterDialogEventExcel
    def Duration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterDialogEventExcel
    def DurationKr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterDialogEventExcel
    def AnimationName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterDialogEventExcel
    def LocalizeKR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterDialogEventExcel
    def LocalizeJP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterDialogEventExcel
    def LocalizeTH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterDialogEventExcel
    def LocalizeTW(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterDialogEventExcel
    def LocalizeEN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterDialogEventExcel
    def VoiceId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterDialogEventExcel
    def VoiceIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # CharacterDialogEventExcel
    def VoiceIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterDialogEventExcel
    def VoiceIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    # CharacterDialogEventExcel
    def CollectionVisible(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterDialogEventExcel
    def CVCollectionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterDialogEventExcel
    def UnlockEventSeason(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterDialogEventExcel
    def ScenarioGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterDialogEventExcel
    def LocalizeCVGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def CharacterDialogEventExcelStart(builder): builder.StartObject(26)
def CharacterDialogEventExcelAddCostumeUniqueId(builder, CostumeUniqueId): builder.PrependInt64Slot(0, CostumeUniqueId, 0)
def CharacterDialogEventExcelAddOriginalCharacterId(builder, OriginalCharacterId): builder.PrependInt64Slot(1, OriginalCharacterId, 0)
def CharacterDialogEventExcelAddDisplayOrder(builder, DisplayOrder): builder.PrependInt64Slot(2, DisplayOrder, 0)
def CharacterDialogEventExcelAddEventID(builder, EventID): builder.PrependInt64Slot(3, EventID, 0)
def CharacterDialogEventExcelAddProductionStep(builder, ProductionStep): builder.PrependInt32Slot(4, ProductionStep, 0)
def CharacterDialogEventExcelAddDialogCategory(builder, DialogCategory): builder.PrependInt32Slot(5, DialogCategory, 0)
def CharacterDialogEventExcelAddDialogCondition(builder, DialogCondition): builder.PrependInt32Slot(6, DialogCondition, 0)
def CharacterDialogEventExcelAddDialogConditionDetail(builder, DialogConditionDetail): builder.PrependInt32Slot(7, DialogConditionDetail, 0)
def CharacterDialogEventExcelAddDialogConditionDetailValue(builder, DialogConditionDetailValue): builder.PrependInt64Slot(8, DialogConditionDetailValue, 0)
def CharacterDialogEventExcelAddGroupId(builder, GroupId): builder.PrependInt64Slot(9, GroupId, 0)
def CharacterDialogEventExcelAddDialogType(builder, DialogType): builder.PrependInt32Slot(10, DialogType, 0)
def CharacterDialogEventExcelAddActionName(builder, ActionName): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(ActionName), 0)
def CharacterDialogEventExcelAddDuration(builder, Duration): builder.PrependInt64Slot(12, Duration, 0)
def CharacterDialogEventExcelAddDurationKr(builder, DurationKr): builder.PrependInt64Slot(13, DurationKr, 0)
def CharacterDialogEventExcelAddAnimationName(builder, AnimationName): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(AnimationName), 0)
def CharacterDialogEventExcelAddLocalizeKR(builder, LocalizeKR): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(LocalizeKR), 0)
def CharacterDialogEventExcelAddLocalizeJP(builder, LocalizeJP): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(LocalizeJP), 0)
def CharacterDialogEventExcelAddLocalizeTH(builder, LocalizeTH): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(LocalizeTH), 0)
def CharacterDialogEventExcelAddLocalizeTW(builder, LocalizeTW): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(LocalizeTW), 0)
def CharacterDialogEventExcelAddLocalizeEN(builder, LocalizeEN): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(LocalizeEN), 0)
def CharacterDialogEventExcelAddVoiceId(builder, VoiceId): builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(VoiceId), 0)
def CharacterDialogEventExcelStartVoiceIdVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterDialogEventExcelAddCollectionVisible(builder, CollectionVisible): builder.PrependBoolSlot(21, CollectionVisible, 0)
def CharacterDialogEventExcelAddCVCollectionType(builder, CVCollectionType): builder.PrependInt32Slot(22, CVCollectionType, 0)
def CharacterDialogEventExcelAddUnlockEventSeason(builder, UnlockEventSeason): builder.PrependInt64Slot(23, UnlockEventSeason, 0)
def CharacterDialogEventExcelAddScenarioGroupId(builder, ScenarioGroupId): builder.PrependInt64Slot(24, ScenarioGroupId, 0)
def CharacterDialogEventExcelAddLocalizeCVGroup(builder, LocalizeCVGroup): builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(LocalizeCVGroup), 0)
def CharacterDialogEventExcelEnd(builder): return builder.EndObject()
