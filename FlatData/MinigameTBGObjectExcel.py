# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MinigameTBGObjectExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMinigameTBGObjectExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MinigameTBGObjectExcel()
        x.Init(buf, n + offset)
        return x

    # MinigameTBGObjectExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MinigameTBGObjectExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGObjectExcel
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGObjectExcel
    def PrefabName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGObjectExcel
    def ObjectType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGObjectExcel
    def ObjectCostType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGObjectExcel
    def ObjectCostId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGObjectExcel
    def ObjectCostAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGObjectExcel
    def Disposable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # MinigameTBGObjectExcel
    def ReEncounterCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def MinigameTBGObjectExcelStart(builder): builder.StartObject(9)
def MinigameTBGObjectExcelAddUniqueId(builder, UniqueId): builder.PrependInt64Slot(0, UniqueId, 0)
def MinigameTBGObjectExcelAddKey(builder, Key): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(Key), 0)
def MinigameTBGObjectExcelAddPrefabName(builder, PrefabName): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(PrefabName), 0)
def MinigameTBGObjectExcelAddObjectType(builder, ObjectType): builder.PrependInt32Slot(3, ObjectType, 0)
def MinigameTBGObjectExcelAddObjectCostType(builder, ObjectCostType): builder.PrependInt32Slot(4, ObjectCostType, 0)
def MinigameTBGObjectExcelAddObjectCostId(builder, ObjectCostId): builder.PrependInt64Slot(5, ObjectCostId, 0)
def MinigameTBGObjectExcelAddObjectCostAmount(builder, ObjectCostAmount): builder.PrependInt32Slot(6, ObjectCostAmount, 0)
def MinigameTBGObjectExcelAddDisposable(builder, Disposable): builder.PrependBoolSlot(7, Disposable, 0)
def MinigameTBGObjectExcelAddReEncounterCost(builder, ReEncounterCost): builder.PrependBoolSlot(8, ReEncounterCost, 0)
def MinigameTBGObjectExcelEnd(builder): return builder.EndObject()
