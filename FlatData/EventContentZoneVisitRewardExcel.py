# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentZoneVisitRewardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEventContentZoneVisitRewardExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentZoneVisitRewardExcel()
        x.Init(buf, n + offset)
        return x

    # EventContentZoneVisitRewardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentZoneVisitRewardExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentZoneVisitRewardExcel
    def EventContentLocationId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentZoneVisitRewardExcel
    def DevName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentZoneVisitRewardExcel
    def CharacterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentZoneVisitRewardExcel
    def CharacterDevName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentZoneVisitRewardExcel
    def VisitRewardParcelType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardParcelTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardParcelTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardParcelTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardParcelId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardParcelIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardParcelIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardParcelIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardProb(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardProbAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardProbLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentZoneVisitRewardExcel
    def VisitRewardProbIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def EventContentZoneVisitRewardExcelStart(builder): builder.StartObject(9)
def EventContentZoneVisitRewardExcelAddEventContentId(builder, EventContentId): builder.PrependInt64Slot(0, EventContentId, 0)
def EventContentZoneVisitRewardExcelAddEventContentLocationId(builder, EventContentLocationId): builder.PrependInt64Slot(1, EventContentLocationId, 0)
def EventContentZoneVisitRewardExcelAddDevName(builder, DevName): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(DevName), 0)
def EventContentZoneVisitRewardExcelAddCharacterId(builder, CharacterId): builder.PrependInt64Slot(3, CharacterId, 0)
def EventContentZoneVisitRewardExcelAddCharacterDevName(builder, CharacterDevName): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(CharacterDevName), 0)
def EventContentZoneVisitRewardExcelAddVisitRewardParcelType(builder, VisitRewardParcelType): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(VisitRewardParcelType), 0)
def EventContentZoneVisitRewardExcelStartVisitRewardParcelTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EventContentZoneVisitRewardExcelAddVisitRewardParcelId(builder, VisitRewardParcelId): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(VisitRewardParcelId), 0)
def EventContentZoneVisitRewardExcelStartVisitRewardParcelIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def EventContentZoneVisitRewardExcelAddVisitRewardAmount(builder, VisitRewardAmount): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(VisitRewardAmount), 0)
def EventContentZoneVisitRewardExcelStartVisitRewardAmountVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def EventContentZoneVisitRewardExcelAddVisitRewardProb(builder, VisitRewardProb): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(VisitRewardProb), 0)
def EventContentZoneVisitRewardExcelStartVisitRewardProbVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def EventContentZoneVisitRewardExcelEnd(builder): return builder.EndObject()
