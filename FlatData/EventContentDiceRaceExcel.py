# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentDiceRaceExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEventContentDiceRaceExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentDiceRaceExcel()
        x.Init(buf, n + offset)
        return x

    # EventContentDiceRaceExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentDiceRaceExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentDiceRaceExcel
    def DiceCostGoodsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentDiceRaceExcel
    def SkipableLap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentDiceRaceExcel
    def DiceRacePawnPrefab(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentDiceRaceExcel
    def IsUsingFixedDice(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentDiceRaceExcel
    def DiceRaceEventType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EventContentDiceRaceExcel
    def DiceRaceEventTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentDiceRaceExcel
    def DiceRaceEventTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def EventContentDiceRaceExcelStart(builder): builder.StartObject(6)
def EventContentDiceRaceExcelAddEventContentId(builder, EventContentId): builder.PrependInt64Slot(0, EventContentId, 0)
def EventContentDiceRaceExcelAddDiceCostGoodsId(builder, DiceCostGoodsId): builder.PrependInt64Slot(1, DiceCostGoodsId, 0)
def EventContentDiceRaceExcelAddSkipableLap(builder, SkipableLap): builder.PrependInt32Slot(2, SkipableLap, 0)
def EventContentDiceRaceExcelAddDiceRacePawnPrefab(builder, DiceRacePawnPrefab): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(DiceRacePawnPrefab), 0)
def EventContentDiceRaceExcelAddIsUsingFixedDice(builder, IsUsingFixedDice): builder.PrependBoolSlot(4, IsUsingFixedDice, 0)
def EventContentDiceRaceExcelAddDiceRaceEventType(builder, DiceRaceEventType): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(DiceRaceEventType), 0)
def EventContentDiceRaceExcelStartDiceRaceEventTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EventContentDiceRaceExcelEnd(builder): return builder.EndObject()
