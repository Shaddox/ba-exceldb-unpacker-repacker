# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FieldDateExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFieldDateExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FieldDateExcel()
        x.Init(buf, n + offset)
        return x

    # FieldDateExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FieldDateExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldDateExcel
    def SeasonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldDateExcel
    def OpenDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldDateExcel
    def DateLocalizeKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FieldDateExcel
    def EntrySceneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldDateExcel
    def StartConditionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FieldDateExcel
    def StartConditionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldDateExcel
    def EndConditionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FieldDateExcel
    def EndConditionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldDateExcel
    def OpenConditionStage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldDateExcel
    def DateResultSpinePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FieldDateExcel
    def DateResultSpineOffsetX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def FieldDateExcelStart(builder): builder.StartObject(12)
def FieldDateExcelAddUniqueId(builder, UniqueId): builder.PrependInt64Slot(0, UniqueId, 0)
def FieldDateExcelAddSeasonId(builder, SeasonId): builder.PrependInt64Slot(1, SeasonId, 0)
def FieldDateExcelAddOpenDate(builder, OpenDate): builder.PrependInt64Slot(2, OpenDate, 0)
def FieldDateExcelAddDateLocalizeKey(builder, DateLocalizeKey): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(DateLocalizeKey), 0)
def FieldDateExcelAddEntrySceneId(builder, EntrySceneId): builder.PrependInt64Slot(4, EntrySceneId, 0)
def FieldDateExcelAddStartConditionType(builder, StartConditionType): builder.PrependInt32Slot(5, StartConditionType, 0)
def FieldDateExcelAddStartConditionId(builder, StartConditionId): builder.PrependInt64Slot(6, StartConditionId, 0)
def FieldDateExcelAddEndConditionType(builder, EndConditionType): builder.PrependInt32Slot(7, EndConditionType, 0)
def FieldDateExcelAddEndConditionId(builder, EndConditionId): builder.PrependInt64Slot(8, EndConditionId, 0)
def FieldDateExcelAddOpenConditionStage(builder, OpenConditionStage): builder.PrependInt64Slot(9, OpenConditionStage, 0)
def FieldDateExcelAddDateResultSpinePath(builder, DateResultSpinePath): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(DateResultSpinePath), 0)
def FieldDateExcelAddDateResultSpineOffsetX(builder, DateResultSpineOffsetX): builder.PrependFloat32Slot(11, DateResultSpineOffsetX, 0.0)
def FieldDateExcelEnd(builder): return builder.EndObject()
