# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterPotentialExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCharacterPotentialExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterPotentialExcel()
        x.Init(buf, n + offset)
        return x

    # CharacterPotentialExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterPotentialExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterPotentialExcel
    def PotentialStatGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterPotentialExcel
    def PotentialStatBonusRateType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterPotentialExcel
    def IsUnnecessaryStat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def CharacterPotentialExcelStart(builder): builder.StartObject(4)
def CharacterPotentialExcelAddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def CharacterPotentialExcelAddPotentialStatGroupId(builder, PotentialStatGroupId): builder.PrependInt64Slot(1, PotentialStatGroupId, 0)
def CharacterPotentialExcelAddPotentialStatBonusRateType(builder, PotentialStatBonusRateType): builder.PrependInt32Slot(2, PotentialStatBonusRateType, 0)
def CharacterPotentialExcelAddIsUnnecessaryStat(builder, IsUnnecessaryStat): builder.PrependBoolSlot(3, IsUnnecessaryStat, 0)
def CharacterPotentialExcelEnd(builder): return builder.EndObject()
