# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentDiceRaceEffectExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEventContentDiceRaceEffectExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentDiceRaceEffectExcel()
        x.Init(buf, n + offset)
        return x

    # EventContentDiceRaceEffectExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentDiceRaceEffectExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EventContentDiceRaceEffectExcel
    def EventContentDiceRaceResultType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentDiceRaceEffectExcel
    def IsDiceResult(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EventContentDiceRaceEffectExcel
    def AniClip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentDiceRaceEffectExcel
    def VoiceId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventContentDiceRaceEffectExcel
    def VoiceIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # EventContentDiceRaceEffectExcel
    def VoiceIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventContentDiceRaceEffectExcel
    def VoiceIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def EventContentDiceRaceEffectExcelStart(builder): builder.StartObject(5)
def EventContentDiceRaceEffectExcelAddEventContentId(builder, EventContentId): builder.PrependInt64Slot(0, EventContentId, 0)
def EventContentDiceRaceEffectExcelAddEventContentDiceRaceResultType(builder, EventContentDiceRaceResultType): builder.PrependInt32Slot(1, EventContentDiceRaceResultType, 0)
def EventContentDiceRaceEffectExcelAddIsDiceResult(builder, IsDiceResult): builder.PrependBoolSlot(2, IsDiceResult, 0)
def EventContentDiceRaceEffectExcelAddAniClip(builder, AniClip): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(AniClip), 0)
def EventContentDiceRaceEffectExcelAddVoiceId(builder, VoiceId): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(VoiceId), 0)
def EventContentDiceRaceEffectExcelStartVoiceIdVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EventContentDiceRaceEffectExcelEnd(builder): return builder.EndObject()
