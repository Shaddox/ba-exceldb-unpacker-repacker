# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterWeaponExpBonusExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCharacterWeaponExpBonusExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterWeaponExpBonusExcel()
        x.Init(buf, n + offset)
        return x

    # CharacterWeaponExpBonusExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterWeaponExpBonusExcel
    def WeaponType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterWeaponExpBonusExcel
    def WeaponExpGrowthA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterWeaponExpBonusExcel
    def WeaponExpGrowthB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterWeaponExpBonusExcel
    def WeaponExpGrowthC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterWeaponExpBonusExcel
    def WeaponExpGrowthZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def CharacterWeaponExpBonusExcelStart(builder): builder.StartObject(5)
def CharacterWeaponExpBonusExcelAddWeaponType(builder, WeaponType): builder.PrependInt32Slot(0, WeaponType, 0)
def CharacterWeaponExpBonusExcelAddWeaponExpGrowthA(builder, WeaponExpGrowthA): builder.PrependInt32Slot(1, WeaponExpGrowthA, 0)
def CharacterWeaponExpBonusExcelAddWeaponExpGrowthB(builder, WeaponExpGrowthB): builder.PrependInt32Slot(2, WeaponExpGrowthB, 0)
def CharacterWeaponExpBonusExcelAddWeaponExpGrowthC(builder, WeaponExpGrowthC): builder.PrependInt32Slot(3, WeaponExpGrowthC, 0)
def CharacterWeaponExpBonusExcelAddWeaponExpGrowthZ(builder, WeaponExpGrowthZ): builder.PrependInt32Slot(4, WeaponExpGrowthZ, 0)
def CharacterWeaponExpBonusExcelEnd(builder): return builder.EndObject()
