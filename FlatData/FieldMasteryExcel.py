# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FieldMasteryExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFieldMasteryExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FieldMasteryExcel()
        x.Init(buf, n + offset)
        return x

    # FieldMasteryExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FieldMasteryExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldMasteryExcel
    def SeasonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldMasteryExcel
    def Order(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FieldMasteryExcel
    def ExpAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldMasteryExcel
    def TokenType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FieldMasteryExcel
    def TokenId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldMasteryExcel
    def TokenRequirement(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldMasteryExcel
    def AccomplishmentConditionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FieldMasteryExcel
    def AccomplishmentConditionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def FieldMasteryExcelStart(builder): builder.StartObject(9)
def FieldMasteryExcelAddUniqueId(builder, UniqueId): builder.PrependInt64Slot(0, UniqueId, 0)
def FieldMasteryExcelAddSeasonId(builder, SeasonId): builder.PrependInt64Slot(1, SeasonId, 0)
def FieldMasteryExcelAddOrder(builder, Order): builder.PrependInt32Slot(2, Order, 0)
def FieldMasteryExcelAddExpAmount(builder, ExpAmount): builder.PrependInt64Slot(3, ExpAmount, 0)
def FieldMasteryExcelAddTokenType(builder, TokenType): builder.PrependInt32Slot(4, TokenType, 0)
def FieldMasteryExcelAddTokenId(builder, TokenId): builder.PrependInt64Slot(5, TokenId, 0)
def FieldMasteryExcelAddTokenRequirement(builder, TokenRequirement): builder.PrependInt64Slot(6, TokenRequirement, 0)
def FieldMasteryExcelAddAccomplishmentConditionType(builder, AccomplishmentConditionType): builder.PrependInt32Slot(7, AccomplishmentConditionType, 0)
def FieldMasteryExcelAddAccomplishmentConditionId(builder, AccomplishmentConditionId): builder.PrependInt64Slot(8, AccomplishmentConditionId, 0)
def FieldMasteryExcelEnd(builder): return builder.EndObject()
