# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GachaCraftOpenTagExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsGachaCraftOpenTagExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GachaCraftOpenTagExcel()
        x.Init(buf, n + offset)
        return x

    # GachaCraftOpenTagExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GachaCraftOpenTagExcel
    def NodeTier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GachaCraftOpenTagExcel
    def Tag_(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # GachaCraftOpenTagExcel
    def Tag_AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # GachaCraftOpenTagExcel
    def Tag_Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GachaCraftOpenTagExcel
    def Tag_IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def GachaCraftOpenTagExcelStart(builder): builder.StartObject(2)
def GachaCraftOpenTagExcelAddNodeTier(builder, NodeTier): builder.PrependInt32Slot(0, NodeTier, 0)
def GachaCraftOpenTagExcelAddTag_(builder, Tag_): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(Tag_), 0)
def GachaCraftOpenTagExcelStartTag_Vector(builder, numElems): return builder.StartVector(4, numElems, 4)
def GachaCraftOpenTagExcelEnd(builder): return builder.EndObject()
