# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ScenarioBGNameExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsScenarioBGNameExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScenarioBGNameExcel()
        x.Init(buf, n + offset)
        return x

    # ScenarioBGNameExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScenarioBGNameExcel
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ScenarioBGNameExcel
    def ProductionStep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioBGNameExcel
    def BGFileName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioBGNameExcel
    def BGType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioBGNameExcel
    def AnimationRoot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioBGNameExcel
    def AnimationName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioBGNameExcel
    def SpineScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ScenarioBGNameExcel
    def SpineLocalPosX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioBGNameExcel
    def SpineLocalPosY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ScenarioBGNameExcelStart(builder): builder.StartObject(9)
def ScenarioBGNameExcelAddName(builder, Name): builder.PrependUint32Slot(0, Name, 0)
def ScenarioBGNameExcelAddProductionStep(builder, ProductionStep): builder.PrependInt32Slot(1, ProductionStep, 0)
def ScenarioBGNameExcelAddBGFileName(builder, BGFileName): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(BGFileName), 0)
def ScenarioBGNameExcelAddBGType(builder, BGType): builder.PrependInt32Slot(3, BGType, 0)
def ScenarioBGNameExcelAddAnimationRoot(builder, AnimationRoot): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(AnimationRoot), 0)
def ScenarioBGNameExcelAddAnimationName(builder, AnimationName): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(AnimationName), 0)
def ScenarioBGNameExcelAddSpineScale(builder, SpineScale): builder.PrependFloat32Slot(6, SpineScale, 0.0)
def ScenarioBGNameExcelAddSpineLocalPosX(builder, SpineLocalPosX): builder.PrependInt32Slot(7, SpineLocalPosX, 0)
def ScenarioBGNameExcelAddSpineLocalPosY(builder, SpineLocalPosY): builder.PrependInt32Slot(8, SpineLocalPosY, 0)
def ScenarioBGNameExcelEnd(builder): return builder.EndObject()
