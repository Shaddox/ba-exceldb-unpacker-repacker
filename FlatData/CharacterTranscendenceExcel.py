# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterTranscendenceExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCharacterTranscendenceExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterTranscendenceExcel()
        x.Init(buf, n + offset)
        return x

    # CharacterTranscendenceExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterTranscendenceExcel
    def CharacterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterTranscendenceExcel
    def MaxFavorLevel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterTranscendenceExcel
    def MaxFavorLevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterTranscendenceExcel
    def MaxFavorLevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def MaxFavorLevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # CharacterTranscendenceExcel
    def StatBonusRateAttack(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateAttackAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateAttackLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateAttackIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # CharacterTranscendenceExcel
    def StatBonusRateHP(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateHPAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateHPLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateHPIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # CharacterTranscendenceExcel
    def StatBonusRateHeal(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateHealAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateHealLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def StatBonusRateHealIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # CharacterTranscendenceExcel
    def RecipeId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CharacterTranscendenceExcel
    def RecipeIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CharacterTranscendenceExcel
    def RecipeIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def RecipeIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # CharacterTranscendenceExcel
    def SkillSlotA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterTranscendenceExcel
    def SkillSlotALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def SkillSlotAIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # CharacterTranscendenceExcel
    def SkillSlotB(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterTranscendenceExcel
    def SkillSlotBLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def SkillSlotBIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # CharacterTranscendenceExcel
    def MaxlevelStar(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterTranscendenceExcel
    def MaxlevelStarAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterTranscendenceExcel
    def MaxlevelStarLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterTranscendenceExcel
    def MaxlevelStarIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def CharacterTranscendenceExcelStart(builder): builder.StartObject(9)
def CharacterTranscendenceExcelAddCharacterId(builder, CharacterId): builder.PrependInt64Slot(0, CharacterId, 0)
def CharacterTranscendenceExcelAddMaxFavorLevel(builder, MaxFavorLevel): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(MaxFavorLevel), 0)
def CharacterTranscendenceExcelStartMaxFavorLevelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterTranscendenceExcelAddStatBonusRateAttack(builder, StatBonusRateAttack): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(StatBonusRateAttack), 0)
def CharacterTranscendenceExcelStartStatBonusRateAttackVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def CharacterTranscendenceExcelAddStatBonusRateHP(builder, StatBonusRateHP): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(StatBonusRateHP), 0)
def CharacterTranscendenceExcelStartStatBonusRateHPVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def CharacterTranscendenceExcelAddStatBonusRateHeal(builder, StatBonusRateHeal): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(StatBonusRateHeal), 0)
def CharacterTranscendenceExcelStartStatBonusRateHealVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def CharacterTranscendenceExcelAddRecipeId(builder, RecipeId): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(RecipeId), 0)
def CharacterTranscendenceExcelStartRecipeIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def CharacterTranscendenceExcelAddSkillSlotA(builder, SkillSlotA): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(SkillSlotA), 0)
def CharacterTranscendenceExcelStartSkillSlotAVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterTranscendenceExcelAddSkillSlotB(builder, SkillSlotB): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(SkillSlotB), 0)
def CharacterTranscendenceExcelStartSkillSlotBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterTranscendenceExcelAddMaxlevelStar(builder, MaxlevelStar): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(MaxlevelStar), 0)
def CharacterTranscendenceExcelStartMaxlevelStarVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterTranscendenceExcelEnd(builder): return builder.EndObject()
