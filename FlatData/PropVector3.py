# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PropVector3(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPropVector3(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PropVector3()
        x.Init(buf, n + offset)
        return x

    # PropVector3
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PropVector3
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PropVector3
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PropVector3
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def PropVector3Start(builder): builder.StartObject(3)
def PropVector3AddX(builder, X): builder.PrependFloat32Slot(0, X, 0.0)
def PropVector3AddY(builder, Y): builder.PrependFloat32Slot(1, Y, 0.0)
def PropVector3AddZ(builder, Z): builder.PrependFloat32Slot(2, Z, 0.0)
def PropVector3End(builder): return builder.EndObject()
