# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GroundGridFlat(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsGroundGridFlat(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GroundGridFlat()
        x.Init(buf, n + offset)
        return x

    # GroundGridFlat
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GroundGridFlat
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GroundGridFlat
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GroundGridFlat
    def StartX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # GroundGridFlat
    def StartY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # GroundGridFlat
    def Gap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # GroundGridFlat
    def Nodes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from FlatData.GroundNodeFlat import GroundNodeFlat
            obj = GroundNodeFlat()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GroundGridFlat
    def NodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GroundGridFlat
    def NodesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # GroundGridFlat
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def GroundGridFlatStart(builder): builder.StartObject(7)
def GroundGridFlatAddX(builder, X): builder.PrependInt32Slot(0, X, 0)
def GroundGridFlatAddY(builder, Y): builder.PrependInt32Slot(1, Y, 0)
def GroundGridFlatAddStartX(builder, StartX): builder.PrependFloat32Slot(2, StartX, 0.0)
def GroundGridFlatAddStartY(builder, StartY): builder.PrependFloat32Slot(3, StartY, 0.0)
def GroundGridFlatAddGap(builder, Gap): builder.PrependFloat32Slot(4, Gap, 0.0)
def GroundGridFlatAddNodes(builder, Nodes): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(Nodes), 0)
def GroundGridFlatStartNodesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def GroundGridFlatAddVersion(builder, Version): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(Version), 0)
def GroundGridFlatEnd(builder): return builder.EndObject()
