# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RaidStageRewardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsRaidStageRewardExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RaidStageRewardExcel()
        x.Init(buf, n + offset)
        return x

    # RaidStageRewardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RaidStageRewardExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # RaidStageRewardExcel
    def IsClearStageRewardHideInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # RaidStageRewardExcel
    def ClearStageRewardProb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # RaidStageRewardExcel
    def ClearStageRewardParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # RaidStageRewardExcel
    def ClearStageRewardParcelUniqueID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # RaidStageRewardExcel
    def ClearStageRewardParcelUniqueName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RaidStageRewardExcel
    def ClearStageRewardAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def RaidStageRewardExcelStart(builder): builder.StartObject(7)
def RaidStageRewardExcelAddGroupId(builder, GroupId): builder.PrependInt64Slot(0, GroupId, 0)
def RaidStageRewardExcelAddIsClearStageRewardHideInfo(builder, IsClearStageRewardHideInfo): builder.PrependBoolSlot(1, IsClearStageRewardHideInfo, 0)
def RaidStageRewardExcelAddClearStageRewardProb(builder, ClearStageRewardProb): builder.PrependInt64Slot(2, ClearStageRewardProb, 0)
def RaidStageRewardExcelAddClearStageRewardParcelType(builder, ClearStageRewardParcelType): builder.PrependInt32Slot(3, ClearStageRewardParcelType, 0)
def RaidStageRewardExcelAddClearStageRewardParcelUniqueID(builder, ClearStageRewardParcelUniqueID): builder.PrependInt64Slot(4, ClearStageRewardParcelUniqueID, 0)
def RaidStageRewardExcelAddClearStageRewardParcelUniqueName(builder, ClearStageRewardParcelUniqueName): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(ClearStageRewardParcelUniqueName), 0)
def RaidStageRewardExcelAddClearStageRewardAmount(builder, ClearStageRewardAmount): builder.PrependInt64Slot(6, ClearStageRewardAmount, 0)
def RaidStageRewardExcelEnd(builder): return builder.EndObject()
