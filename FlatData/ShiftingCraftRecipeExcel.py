# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ShiftingCraftRecipeExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsShiftingCraftRecipeExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ShiftingCraftRecipeExcel()
        x.Init(buf, n + offset)
        return x

    # ShiftingCraftRecipeExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ShiftingCraftRecipeExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShiftingCraftRecipeExcel
    def DisplayOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShiftingCraftRecipeExcel
    def NotificationId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ShiftingCraftRecipeExcel
    def ResultParcel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ShiftingCraftRecipeExcel
    def ResultId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShiftingCraftRecipeExcel
    def ResultAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShiftingCraftRecipeExcel
    def RequireItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShiftingCraftRecipeExcel
    def RequireItemAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShiftingCraftRecipeExcel
    def RequireGold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ShiftingCraftRecipeExcel
    def IngredientTag(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ShiftingCraftRecipeExcel
    def IngredientTagAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # ShiftingCraftRecipeExcel
    def IngredientTagLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ShiftingCraftRecipeExcel
    def IngredientTagIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # ShiftingCraftRecipeExcel
    def IngredientExp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def ShiftingCraftRecipeExcelStart(builder): builder.StartObject(11)
def ShiftingCraftRecipeExcelAddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def ShiftingCraftRecipeExcelAddDisplayOrder(builder, DisplayOrder): builder.PrependInt64Slot(1, DisplayOrder, 0)
def ShiftingCraftRecipeExcelAddNotificationId(builder, NotificationId): builder.PrependInt32Slot(2, NotificationId, 0)
def ShiftingCraftRecipeExcelAddResultParcel(builder, ResultParcel): builder.PrependInt32Slot(3, ResultParcel, 0)
def ShiftingCraftRecipeExcelAddResultId(builder, ResultId): builder.PrependInt64Slot(4, ResultId, 0)
def ShiftingCraftRecipeExcelAddResultAmount(builder, ResultAmount): builder.PrependInt64Slot(5, ResultAmount, 0)
def ShiftingCraftRecipeExcelAddRequireItemId(builder, RequireItemId): builder.PrependInt64Slot(6, RequireItemId, 0)
def ShiftingCraftRecipeExcelAddRequireItemAmount(builder, RequireItemAmount): builder.PrependInt64Slot(7, RequireItemAmount, 0)
def ShiftingCraftRecipeExcelAddRequireGold(builder, RequireGold): builder.PrependInt64Slot(8, RequireGold, 0)
def ShiftingCraftRecipeExcelAddIngredientTag(builder, IngredientTag): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(IngredientTag), 0)
def ShiftingCraftRecipeExcelStartIngredientTagVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ShiftingCraftRecipeExcelAddIngredientExp(builder, IngredientExp): builder.PrependInt64Slot(10, IngredientExp, 0)
def ShiftingCraftRecipeExcelEnd(builder): return builder.EndObject()
