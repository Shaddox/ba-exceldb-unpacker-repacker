# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class WorldRaidConditionExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsWorldRaidConditionExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WorldRaidConditionExcel()
        x.Init(buf, n + offset)
        return x

    # WorldRaidConditionExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # WorldRaidConditionExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidConditionExcel
    def LockUI(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # WorldRaidConditionExcel
    def LockUILength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorldRaidConditionExcel
    def LockUIIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # WorldRaidConditionExcel
    def HideWhenLocked(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # WorldRaidConditionExcel
    def AccountLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldRaidConditionExcel
    def ScenarioModeId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # WorldRaidConditionExcel
    def ScenarioModeIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # WorldRaidConditionExcel
    def ScenarioModeIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorldRaidConditionExcel
    def ScenarioModeIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # WorldRaidConditionExcel
    def CampaignStageID(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # WorldRaidConditionExcel
    def CampaignStageIDAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # WorldRaidConditionExcel
    def CampaignStageIDLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorldRaidConditionExcel
    def CampaignStageIDIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # WorldRaidConditionExcel
    def MultipleConditionCheckType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # WorldRaidConditionExcel
    def AfterWhenDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WorldRaidConditionExcel
    def WorldRaidBossKill(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # WorldRaidConditionExcel
    def WorldRaidBossKillAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # WorldRaidConditionExcel
    def WorldRaidBossKillLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorldRaidConditionExcel
    def WorldRaidBossKillIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def WorldRaidConditionExcelStart(builder): builder.StartObject(9)
def WorldRaidConditionExcelAddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def WorldRaidConditionExcelAddLockUI(builder, LockUI): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(LockUI), 0)
def WorldRaidConditionExcelStartLockUIVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def WorldRaidConditionExcelAddHideWhenLocked(builder, HideWhenLocked): builder.PrependBoolSlot(2, HideWhenLocked, 0)
def WorldRaidConditionExcelAddAccountLevel(builder, AccountLevel): builder.PrependInt64Slot(3, AccountLevel, 0)
def WorldRaidConditionExcelAddScenarioModeId(builder, ScenarioModeId): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(ScenarioModeId), 0)
def WorldRaidConditionExcelStartScenarioModeIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def WorldRaidConditionExcelAddCampaignStageID(builder, CampaignStageID): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(CampaignStageID), 0)
def WorldRaidConditionExcelStartCampaignStageIDVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def WorldRaidConditionExcelAddMultipleConditionCheckType(builder, MultipleConditionCheckType): builder.PrependInt32Slot(6, MultipleConditionCheckType, 0)
def WorldRaidConditionExcelAddAfterWhenDate(builder, AfterWhenDate): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(AfterWhenDate), 0)
def WorldRaidConditionExcelAddWorldRaidBossKill(builder, WorldRaidBossKill): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(WorldRaidBossKill), 0)
def WorldRaidConditionExcelStartWorldRaidBossKillVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def WorldRaidConditionExcelEnd(builder): return builder.EndObject()
