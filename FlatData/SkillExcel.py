# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SkillExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSkillExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SkillExcel()
        x.Init(buf, n + offset)
        return x

    # SkillExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SkillExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def LocalizeSkillId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SkillExcel
    def SkillDataKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SkillExcel
    def VisualDataKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SkillExcel
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def SkillCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def ExtraSkillCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def EnemySkillCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def ExtraEnemySkillCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def NPCSkillCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def ExtraNPCSkillCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def BulletType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def StartCoolTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def CoolTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def EnemyStartCoolTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def EnemyCoolTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def NPCStartCoolTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def NPCCoolTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def UseAtg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def RequireCharacterLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def RequireLevelUpMaterial(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def IconName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SkillExcel
    def IsShowInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SkillExcel
    def IsShowSpeechbubble(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SkillExcel
    def PublicSpeechDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def AdditionalToolTipId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # SkillExcel
    def TextureSkillCardForFormConversion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SkillExcel
    def SkillCardLabelPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SkillExcelStart(builder): builder.StartObject(29)
def SkillExcelAddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def SkillExcelAddLocalizeSkillId(builder, LocalizeSkillId): builder.PrependUint32Slot(1, LocalizeSkillId, 0)
def SkillExcelAddGroupId(builder, GroupId): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(GroupId), 0)
def SkillExcelAddSkillDataKey(builder, SkillDataKey): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(SkillDataKey), 0)
def SkillExcelAddVisualDataKey(builder, VisualDataKey): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(VisualDataKey), 0)
def SkillExcelAddLevel(builder, Level): builder.PrependInt32Slot(5, Level, 0)
def SkillExcelAddSkillCost(builder, SkillCost): builder.PrependInt32Slot(6, SkillCost, 0)
def SkillExcelAddExtraSkillCost(builder, ExtraSkillCost): builder.PrependInt32Slot(7, ExtraSkillCost, 0)
def SkillExcelAddEnemySkillCost(builder, EnemySkillCost): builder.PrependInt32Slot(8, EnemySkillCost, 0)
def SkillExcelAddExtraEnemySkillCost(builder, ExtraEnemySkillCost): builder.PrependInt32Slot(9, ExtraEnemySkillCost, 0)
def SkillExcelAddNPCSkillCost(builder, NPCSkillCost): builder.PrependInt32Slot(10, NPCSkillCost, 0)
def SkillExcelAddExtraNPCSkillCost(builder, ExtraNPCSkillCost): builder.PrependInt32Slot(11, ExtraNPCSkillCost, 0)
def SkillExcelAddBulletType(builder, BulletType): builder.PrependInt32Slot(12, BulletType, 0)
def SkillExcelAddStartCoolTime(builder, StartCoolTime): builder.PrependInt32Slot(13, StartCoolTime, 0)
def SkillExcelAddCoolTime(builder, CoolTime): builder.PrependInt32Slot(14, CoolTime, 0)
def SkillExcelAddEnemyStartCoolTime(builder, EnemyStartCoolTime): builder.PrependInt32Slot(15, EnemyStartCoolTime, 0)
def SkillExcelAddEnemyCoolTime(builder, EnemyCoolTime): builder.PrependInt32Slot(16, EnemyCoolTime, 0)
def SkillExcelAddNPCStartCoolTime(builder, NPCStartCoolTime): builder.PrependInt32Slot(17, NPCStartCoolTime, 0)
def SkillExcelAddNPCCoolTime(builder, NPCCoolTime): builder.PrependInt32Slot(18, NPCCoolTime, 0)
def SkillExcelAddUseAtg(builder, UseAtg): builder.PrependInt32Slot(19, UseAtg, 0)
def SkillExcelAddRequireCharacterLevel(builder, RequireCharacterLevel): builder.PrependInt32Slot(20, RequireCharacterLevel, 0)
def SkillExcelAddRequireLevelUpMaterial(builder, RequireLevelUpMaterial): builder.PrependInt64Slot(21, RequireLevelUpMaterial, 0)
def SkillExcelAddIconName(builder, IconName): builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(IconName), 0)
def SkillExcelAddIsShowInfo(builder, IsShowInfo): builder.PrependBoolSlot(23, IsShowInfo, 0)
def SkillExcelAddIsShowSpeechbubble(builder, IsShowSpeechbubble): builder.PrependBoolSlot(24, IsShowSpeechbubble, 0)
def SkillExcelAddPublicSpeechDuration(builder, PublicSpeechDuration): builder.PrependInt32Slot(25, PublicSpeechDuration, 0)
def SkillExcelAddAdditionalToolTipId(builder, AdditionalToolTipId): builder.PrependInt64Slot(26, AdditionalToolTipId, 0)
def SkillExcelAddTextureSkillCardForFormConversion(builder, TextureSkillCardForFormConversion): builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(TextureSkillCardForFormConversion), 0)
def SkillExcelAddSkillCardLabelPath(builder, SkillCardLabelPath): builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(SkillCardLabelPath), 0)
def SkillExcelEnd(builder): return builder.EndObject()
