# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterStatExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCharacterStatExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterStatExcel()
        x.Init(buf, n + offset)
        return x

    # CharacterStatExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterStatExcel
    def CharacterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def StabilityRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def StabilityPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def AttackPower1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def AttackPower100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def MaxHP1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def MaxHP100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DefensePower1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DefensePower100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealPower1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealPower100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DodgePoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def AccuracyPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def CriticalPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def CriticalResistPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def CriticalDamageRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def CriticalDamageResistRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def BlockRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealEffectivenessRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def OppressionPower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def OppressionResist(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DefensePenetration1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DefensePenetration100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DefensePenetrationResist1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DefensePenetrationResist100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceExplosionRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhancePierceRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceMysticRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceSonicRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceSiegeRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceNormalRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceLightArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceHeavyArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceUnarmedRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceElasticArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceStructureRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceNormalArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ExtendBuffDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ExtendDebuffDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ExtendCrowdControlDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def AmmoCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def AmmoCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def IgnoreDelayCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def NormalAttackSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def Range(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def InitialRangeRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def MoveSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def SightPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ActiveGauge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def GroggyGauge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def GroggyTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def StrategyMobility(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ActionCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def StrategySightRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DamageRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DamagedRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DamageRatio2Increase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DamageRatio2Decrease(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DamagedRatio2Increase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DamagedRatio2Decrease(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ExDamagedRatioIncrease(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ExDamagedRatioDecrease(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def StreetBattleAdaptation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def OutdoorBattleAdaptation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def IndoorBattleAdaptation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def RegenCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def CharacterStatExcelStart(builder): builder.StartObject(66)
def CharacterStatExcelAddCharacterId(builder, CharacterId): builder.PrependInt64Slot(0, CharacterId, 0)
def CharacterStatExcelAddStabilityRate(builder, StabilityRate): builder.PrependInt64Slot(1, StabilityRate, 0)
def CharacterStatExcelAddStabilityPoint(builder, StabilityPoint): builder.PrependInt64Slot(2, StabilityPoint, 0)
def CharacterStatExcelAddAttackPower1(builder, AttackPower1): builder.PrependInt64Slot(3, AttackPower1, 0)
def CharacterStatExcelAddAttackPower100(builder, AttackPower100): builder.PrependInt64Slot(4, AttackPower100, 0)
def CharacterStatExcelAddMaxHP1(builder, MaxHP1): builder.PrependInt64Slot(5, MaxHP1, 0)
def CharacterStatExcelAddMaxHP100(builder, MaxHP100): builder.PrependInt64Slot(6, MaxHP100, 0)
def CharacterStatExcelAddDefensePower1(builder, DefensePower1): builder.PrependInt64Slot(7, DefensePower1, 0)
def CharacterStatExcelAddDefensePower100(builder, DefensePower100): builder.PrependInt64Slot(8, DefensePower100, 0)
def CharacterStatExcelAddHealPower1(builder, HealPower1): builder.PrependInt64Slot(9, HealPower1, 0)
def CharacterStatExcelAddHealPower100(builder, HealPower100): builder.PrependInt64Slot(10, HealPower100, 0)
def CharacterStatExcelAddDodgePoint(builder, DodgePoint): builder.PrependInt64Slot(11, DodgePoint, 0)
def CharacterStatExcelAddAccuracyPoint(builder, AccuracyPoint): builder.PrependInt64Slot(12, AccuracyPoint, 0)
def CharacterStatExcelAddCriticalPoint(builder, CriticalPoint): builder.PrependInt64Slot(13, CriticalPoint, 0)
def CharacterStatExcelAddCriticalResistPoint(builder, CriticalResistPoint): builder.PrependInt64Slot(14, CriticalResistPoint, 0)
def CharacterStatExcelAddCriticalDamageRate(builder, CriticalDamageRate): builder.PrependInt64Slot(15, CriticalDamageRate, 0)
def CharacterStatExcelAddCriticalDamageResistRate(builder, CriticalDamageResistRate): builder.PrependInt64Slot(16, CriticalDamageResistRate, 0)
def CharacterStatExcelAddBlockRate(builder, BlockRate): builder.PrependInt64Slot(17, BlockRate, 0)
def CharacterStatExcelAddHealEffectivenessRate(builder, HealEffectivenessRate): builder.PrependInt64Slot(18, HealEffectivenessRate, 0)
def CharacterStatExcelAddOppressionPower(builder, OppressionPower): builder.PrependInt64Slot(19, OppressionPower, 0)
def CharacterStatExcelAddOppressionResist(builder, OppressionResist): builder.PrependInt64Slot(20, OppressionResist, 0)
def CharacterStatExcelAddDefensePenetration1(builder, DefensePenetration1): builder.PrependInt64Slot(21, DefensePenetration1, 0)
def CharacterStatExcelAddDefensePenetration100(builder, DefensePenetration100): builder.PrependInt64Slot(22, DefensePenetration100, 0)
def CharacterStatExcelAddDefensePenetrationResist1(builder, DefensePenetrationResist1): builder.PrependInt64Slot(23, DefensePenetrationResist1, 0)
def CharacterStatExcelAddDefensePenetrationResist100(builder, DefensePenetrationResist100): builder.PrependInt64Slot(24, DefensePenetrationResist100, 0)
def CharacterStatExcelAddEnhanceExplosionRate(builder, EnhanceExplosionRate): builder.PrependInt64Slot(25, EnhanceExplosionRate, 0)
def CharacterStatExcelAddEnhancePierceRate(builder, EnhancePierceRate): builder.PrependInt64Slot(26, EnhancePierceRate, 0)
def CharacterStatExcelAddEnhanceMysticRate(builder, EnhanceMysticRate): builder.PrependInt64Slot(27, EnhanceMysticRate, 0)
def CharacterStatExcelAddEnhanceSonicRate(builder, EnhanceSonicRate): builder.PrependInt64Slot(28, EnhanceSonicRate, 0)
def CharacterStatExcelAddEnhanceSiegeRate(builder, EnhanceSiegeRate): builder.PrependInt64Slot(29, EnhanceSiegeRate, 0)
def CharacterStatExcelAddEnhanceNormalRate(builder, EnhanceNormalRate): builder.PrependInt64Slot(30, EnhanceNormalRate, 0)
def CharacterStatExcelAddEnhanceLightArmorRate(builder, EnhanceLightArmorRate): builder.PrependInt64Slot(31, EnhanceLightArmorRate, 0)
def CharacterStatExcelAddEnhanceHeavyArmorRate(builder, EnhanceHeavyArmorRate): builder.PrependInt64Slot(32, EnhanceHeavyArmorRate, 0)
def CharacterStatExcelAddEnhanceUnarmedRate(builder, EnhanceUnarmedRate): builder.PrependInt64Slot(33, EnhanceUnarmedRate, 0)
def CharacterStatExcelAddEnhanceElasticArmorRate(builder, EnhanceElasticArmorRate): builder.PrependInt64Slot(34, EnhanceElasticArmorRate, 0)
def CharacterStatExcelAddEnhanceStructureRate(builder, EnhanceStructureRate): builder.PrependInt64Slot(35, EnhanceStructureRate, 0)
def CharacterStatExcelAddEnhanceNormalArmorRate(builder, EnhanceNormalArmorRate): builder.PrependInt64Slot(36, EnhanceNormalArmorRate, 0)
def CharacterStatExcelAddExtendBuffDuration(builder, ExtendBuffDuration): builder.PrependInt64Slot(37, ExtendBuffDuration, 0)
def CharacterStatExcelAddExtendDebuffDuration(builder, ExtendDebuffDuration): builder.PrependInt64Slot(38, ExtendDebuffDuration, 0)
def CharacterStatExcelAddExtendCrowdControlDuration(builder, ExtendCrowdControlDuration): builder.PrependInt64Slot(39, ExtendCrowdControlDuration, 0)
def CharacterStatExcelAddAmmoCount(builder, AmmoCount): builder.PrependInt64Slot(40, AmmoCount, 0)
def CharacterStatExcelAddAmmoCost(builder, AmmoCost): builder.PrependInt64Slot(41, AmmoCost, 0)
def CharacterStatExcelAddIgnoreDelayCount(builder, IgnoreDelayCount): builder.PrependInt64Slot(42, IgnoreDelayCount, 0)
def CharacterStatExcelAddNormalAttackSpeed(builder, NormalAttackSpeed): builder.PrependInt64Slot(43, NormalAttackSpeed, 0)
def CharacterStatExcelAddRange(builder, Range): builder.PrependInt64Slot(44, Range, 0)
def CharacterStatExcelAddInitialRangeRate(builder, InitialRangeRate): builder.PrependInt64Slot(45, InitialRangeRate, 0)
def CharacterStatExcelAddMoveSpeed(builder, MoveSpeed): builder.PrependInt64Slot(46, MoveSpeed, 0)
def CharacterStatExcelAddSightPoint(builder, SightPoint): builder.PrependInt64Slot(47, SightPoint, 0)
def CharacterStatExcelAddActiveGauge(builder, ActiveGauge): builder.PrependInt64Slot(48, ActiveGauge, 0)
def CharacterStatExcelAddGroggyGauge(builder, GroggyGauge): builder.PrependInt32Slot(49, GroggyGauge, 0)
def CharacterStatExcelAddGroggyTime(builder, GroggyTime): builder.PrependInt32Slot(50, GroggyTime, 0)
def CharacterStatExcelAddStrategyMobility(builder, StrategyMobility): builder.PrependInt64Slot(51, StrategyMobility, 0)
def CharacterStatExcelAddActionCount(builder, ActionCount): builder.PrependInt64Slot(52, ActionCount, 0)
def CharacterStatExcelAddStrategySightRange(builder, StrategySightRange): builder.PrependInt64Slot(53, StrategySightRange, 0)
def CharacterStatExcelAddDamageRatio(builder, DamageRatio): builder.PrependInt64Slot(54, DamageRatio, 0)
def CharacterStatExcelAddDamagedRatio(builder, DamagedRatio): builder.PrependInt64Slot(55, DamagedRatio, 0)
def CharacterStatExcelAddDamageRatio2Increase(builder, DamageRatio2Increase): builder.PrependInt64Slot(56, DamageRatio2Increase, 0)
def CharacterStatExcelAddDamageRatio2Decrease(builder, DamageRatio2Decrease): builder.PrependInt64Slot(57, DamageRatio2Decrease, 0)
def CharacterStatExcelAddDamagedRatio2Increase(builder, DamagedRatio2Increase): builder.PrependInt64Slot(58, DamagedRatio2Increase, 0)
def CharacterStatExcelAddDamagedRatio2Decrease(builder, DamagedRatio2Decrease): builder.PrependInt64Slot(59, DamagedRatio2Decrease, 0)
def CharacterStatExcelAddExDamagedRatioIncrease(builder, ExDamagedRatioIncrease): builder.PrependInt64Slot(60, ExDamagedRatioIncrease, 0)
def CharacterStatExcelAddExDamagedRatioDecrease(builder, ExDamagedRatioDecrease): builder.PrependInt64Slot(61, ExDamagedRatioDecrease, 0)
def CharacterStatExcelAddStreetBattleAdaptation(builder, StreetBattleAdaptation): builder.PrependInt32Slot(62, StreetBattleAdaptation, 0)
def CharacterStatExcelAddOutdoorBattleAdaptation(builder, OutdoorBattleAdaptation): builder.PrependInt32Slot(63, OutdoorBattleAdaptation, 0)
def CharacterStatExcelAddIndoorBattleAdaptation(builder, IndoorBattleAdaptation): builder.PrependInt32Slot(64, IndoorBattleAdaptation, 0)
def CharacterStatExcelAddRegenCost(builder, RegenCost): builder.PrependInt64Slot(65, RegenCost, 0)
def CharacterStatExcelEnd(builder): return builder.EndObject()
