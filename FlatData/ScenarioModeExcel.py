# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ScenarioModeExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsScenarioModeExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScenarioModeExcel()
        x.Init(buf, n + offset)
        return x

    # ScenarioModeExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScenarioModeExcel
    def ModeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def ModeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def SubType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def VolumeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def ChapterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def EpisodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def Hide(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ScenarioModeExcel
    def Open(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ScenarioModeExcel
    def ScenarioOpenDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioModeExcel
    def ScenarioCloseDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioModeExcel
    def IsContinue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ScenarioModeExcel
    def EpisodeContinueModeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def FrontScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ScenarioModeExcel
    def FrontScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ScenarioModeExcel
    def FrontScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ScenarioModeExcel
    def FrontScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # ScenarioModeExcel
    def StrategyId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def GroundId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def IsDefeatBattle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ScenarioModeExcel
    def BattleDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def BackScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ScenarioModeExcel
    def BackScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ScenarioModeExcel
    def BackScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ScenarioModeExcel
    def BackScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # ScenarioModeExcel
    def ClearedModeId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ScenarioModeExcel
    def ClearedModeIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ScenarioModeExcel
    def ClearedModeIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ScenarioModeExcel
    def ClearedModeIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # ScenarioModeExcel
    def ScenarioModeRewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def IsScenarioSpecialReward(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ScenarioModeExcel
    def AccountLevelLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def ClearedStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def NeedClub(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def NeedClubStudentCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def EventContentType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def EventContentCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def EventContentConditionGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def MapDifficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def StepIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def RecommendLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def EventIconParcelPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioModeExcel
    def EventBannerTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def Lof(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ScenarioModeExcel
    def StageTopography(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def FixedEchelonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def CompleteReportEventName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioModeExcel
    def EchelonExtensionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ScenarioModeExcel
    def CollectionGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def ScenarioModeExcelStart(builder): builder.StartObject(40)
def ScenarioModeExcelAddModeId(builder, ModeId): builder.PrependInt64Slot(0, ModeId, 0)
def ScenarioModeExcelAddModeType(builder, ModeType): builder.PrependInt32Slot(1, ModeType, 0)
def ScenarioModeExcelAddSubType(builder, SubType): builder.PrependInt32Slot(2, SubType, 0)
def ScenarioModeExcelAddVolumeId(builder, VolumeId): builder.PrependInt64Slot(3, VolumeId, 0)
def ScenarioModeExcelAddChapterId(builder, ChapterId): builder.PrependInt64Slot(4, ChapterId, 0)
def ScenarioModeExcelAddEpisodeId(builder, EpisodeId): builder.PrependInt64Slot(5, EpisodeId, 0)
def ScenarioModeExcelAddHide(builder, Hide): builder.PrependBoolSlot(6, Hide, 0)
def ScenarioModeExcelAddOpen(builder, Open): builder.PrependBoolSlot(7, Open, 0)
def ScenarioModeExcelAddScenarioOpenDate(builder, ScenarioOpenDate): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(ScenarioOpenDate), 0)
def ScenarioModeExcelAddScenarioCloseDate(builder, ScenarioCloseDate): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(ScenarioCloseDate), 0)
def ScenarioModeExcelAddIsContinue(builder, IsContinue): builder.PrependBoolSlot(10, IsContinue, 0)
def ScenarioModeExcelAddEpisodeContinueModeId(builder, EpisodeContinueModeId): builder.PrependInt64Slot(11, EpisodeContinueModeId, 0)
def ScenarioModeExcelAddFrontScenarioGroupId(builder, FrontScenarioGroupId): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(FrontScenarioGroupId), 0)
def ScenarioModeExcelStartFrontScenarioGroupIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def ScenarioModeExcelAddStrategyId(builder, StrategyId): builder.PrependInt64Slot(13, StrategyId, 0)
def ScenarioModeExcelAddGroundId(builder, GroundId): builder.PrependInt64Slot(14, GroundId, 0)
def ScenarioModeExcelAddIsDefeatBattle(builder, IsDefeatBattle): builder.PrependBoolSlot(15, IsDefeatBattle, 0)
def ScenarioModeExcelAddBattleDuration(builder, BattleDuration): builder.PrependInt64Slot(16, BattleDuration, 0)
def ScenarioModeExcelAddBackScenarioGroupId(builder, BackScenarioGroupId): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(BackScenarioGroupId), 0)
def ScenarioModeExcelStartBackScenarioGroupIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def ScenarioModeExcelAddClearedModeId(builder, ClearedModeId): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(ClearedModeId), 0)
def ScenarioModeExcelStartClearedModeIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def ScenarioModeExcelAddScenarioModeRewardId(builder, ScenarioModeRewardId): builder.PrependInt64Slot(19, ScenarioModeRewardId, 0)
def ScenarioModeExcelAddIsScenarioSpecialReward(builder, IsScenarioSpecialReward): builder.PrependBoolSlot(20, IsScenarioSpecialReward, 0)
def ScenarioModeExcelAddAccountLevelLimit(builder, AccountLevelLimit): builder.PrependInt64Slot(21, AccountLevelLimit, 0)
def ScenarioModeExcelAddClearedStageId(builder, ClearedStageId): builder.PrependInt64Slot(22, ClearedStageId, 0)
def ScenarioModeExcelAddNeedClub(builder, NeedClub): builder.PrependInt32Slot(23, NeedClub, 0)
def ScenarioModeExcelAddNeedClubStudentCount(builder, NeedClubStudentCount): builder.PrependInt32Slot(24, NeedClubStudentCount, 0)
def ScenarioModeExcelAddEventContentId(builder, EventContentId): builder.PrependInt64Slot(25, EventContentId, 0)
def ScenarioModeExcelAddEventContentType(builder, EventContentType): builder.PrependInt32Slot(26, EventContentType, 0)
def ScenarioModeExcelAddEventContentCondition(builder, EventContentCondition): builder.PrependInt64Slot(27, EventContentCondition, 0)
def ScenarioModeExcelAddEventContentConditionGroup(builder, EventContentConditionGroup): builder.PrependInt64Slot(28, EventContentConditionGroup, 0)
def ScenarioModeExcelAddMapDifficulty(builder, MapDifficulty): builder.PrependInt32Slot(29, MapDifficulty, 0)
def ScenarioModeExcelAddStepIndex(builder, StepIndex): builder.PrependInt32Slot(30, StepIndex, 0)
def ScenarioModeExcelAddRecommendLevel(builder, RecommendLevel): builder.PrependInt32Slot(31, RecommendLevel, 0)
def ScenarioModeExcelAddEventIconParcelPath(builder, EventIconParcelPath): builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(EventIconParcelPath), 0)
def ScenarioModeExcelAddEventBannerTitle(builder, EventBannerTitle): builder.PrependUint32Slot(33, EventBannerTitle, 0)
def ScenarioModeExcelAddLof(builder, Lof): builder.PrependBoolSlot(34, Lof, 0)
def ScenarioModeExcelAddStageTopography(builder, StageTopography): builder.PrependInt32Slot(35, StageTopography, 0)
def ScenarioModeExcelAddFixedEchelonId(builder, FixedEchelonId): builder.PrependInt64Slot(36, FixedEchelonId, 0)
def ScenarioModeExcelAddCompleteReportEventName(builder, CompleteReportEventName): builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(CompleteReportEventName), 0)
def ScenarioModeExcelAddEchelonExtensionType(builder, EchelonExtensionType): builder.PrependInt32Slot(38, EchelonExtensionType, 0)
def ScenarioModeExcelAddCollectionGroupId(builder, CollectionGroupId): builder.PrependInt64Slot(39, CollectionGroupId, 0)
def ScenarioModeExcelEnd(builder): return builder.EndObject()
