# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ItemExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsItemExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ItemExcel()
        x.Init(buf, n + offset)
        return x

    # ItemExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ItemExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def ProductionStep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def ItemCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def Quality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def Icon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ItemExcel
    def SpriteName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ItemExcel
    def StackableMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def StackableFunction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def ImmediateUse(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ItemExcel
    def UsingResultParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def UsingResultId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def UsingResultAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def MailType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def ExpiryChangeParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def ExpiryChangeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def ExpiryChangeAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def CanTierUpgrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # ItemExcel
    def TierUpgradeRecipeCraftId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ItemExcel
    def TagsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # ItemExcel
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ItemExcel
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        return o == 0

    # ItemExcel
    def CraftQualityTier0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def CraftQualityTier1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def CraftQualityTier2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def ShiftingCraftQuality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def MaxGiftTags(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def ShopCategory(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ItemExcel
    def ShopCategoryAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # ItemExcel
    def ShopCategoryLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ItemExcel
    def ShopCategoryIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        return o == 0

    # ItemExcel
    def ExpirationDateTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ItemExcel
    def ExpirationNotifyDateIn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def ShortcutTypeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ItemExcel
    def GachaTicket(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ItemExcelStart(builder): builder.StartObject(32)
def ItemExcelAddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def ItemExcelAddGroupId(builder, GroupId): builder.PrependInt64Slot(1, GroupId, 0)
def ItemExcelAddRarity(builder, Rarity): builder.PrependInt32Slot(2, Rarity, 0)
def ItemExcelAddProductionStep(builder, ProductionStep): builder.PrependInt32Slot(3, ProductionStep, 0)
def ItemExcelAddLocalizeEtcId(builder, LocalizeEtcId): builder.PrependUint32Slot(4, LocalizeEtcId, 0)
def ItemExcelAddItemCategory(builder, ItemCategory): builder.PrependInt32Slot(5, ItemCategory, 0)
def ItemExcelAddQuality(builder, Quality): builder.PrependInt64Slot(6, Quality, 0)
def ItemExcelAddIcon(builder, Icon): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(Icon), 0)
def ItemExcelAddSpriteName(builder, SpriteName): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(SpriteName), 0)
def ItemExcelAddStackableMax(builder, StackableMax): builder.PrependInt32Slot(9, StackableMax, 0)
def ItemExcelAddStackableFunction(builder, StackableFunction): builder.PrependInt32Slot(10, StackableFunction, 0)
def ItemExcelAddImmediateUse(builder, ImmediateUse): builder.PrependBoolSlot(11, ImmediateUse, 0)
def ItemExcelAddUsingResultParcelType(builder, UsingResultParcelType): builder.PrependInt32Slot(12, UsingResultParcelType, 0)
def ItemExcelAddUsingResultId(builder, UsingResultId): builder.PrependInt64Slot(13, UsingResultId, 0)
def ItemExcelAddUsingResultAmount(builder, UsingResultAmount): builder.PrependInt64Slot(14, UsingResultAmount, 0)
def ItemExcelAddMailType(builder, MailType): builder.PrependInt32Slot(15, MailType, 0)
def ItemExcelAddExpiryChangeParcelType(builder, ExpiryChangeParcelType): builder.PrependInt32Slot(16, ExpiryChangeParcelType, 0)
def ItemExcelAddExpiryChangeId(builder, ExpiryChangeId): builder.PrependInt64Slot(17, ExpiryChangeId, 0)
def ItemExcelAddExpiryChangeAmount(builder, ExpiryChangeAmount): builder.PrependInt64Slot(18, ExpiryChangeAmount, 0)
def ItemExcelAddCanTierUpgrade(builder, CanTierUpgrade): builder.PrependBoolSlot(19, CanTierUpgrade, 0)
def ItemExcelAddTierUpgradeRecipeCraftId(builder, TierUpgradeRecipeCraftId): builder.PrependInt64Slot(20, TierUpgradeRecipeCraftId, 0)
def ItemExcelAddTags(builder, Tags): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(Tags), 0)
def ItemExcelStartTagsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ItemExcelAddCraftQualityTier0(builder, CraftQualityTier0): builder.PrependInt64Slot(22, CraftQualityTier0, 0)
def ItemExcelAddCraftQualityTier1(builder, CraftQualityTier1): builder.PrependInt64Slot(23, CraftQualityTier1, 0)
def ItemExcelAddCraftQualityTier2(builder, CraftQualityTier2): builder.PrependInt64Slot(24, CraftQualityTier2, 0)
def ItemExcelAddShiftingCraftQuality(builder, ShiftingCraftQuality): builder.PrependInt64Slot(25, ShiftingCraftQuality, 0)
def ItemExcelAddMaxGiftTags(builder, MaxGiftTags): builder.PrependInt32Slot(26, MaxGiftTags, 0)
def ItemExcelAddShopCategory(builder, ShopCategory): builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(ShopCategory), 0)
def ItemExcelStartShopCategoryVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ItemExcelAddExpirationDateTime(builder, ExpirationDateTime): builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(ExpirationDateTime), 0)
def ItemExcelAddExpirationNotifyDateIn(builder, ExpirationNotifyDateIn): builder.PrependInt32Slot(29, ExpirationNotifyDateIn, 0)
def ItemExcelAddShortcutTypeId(builder, ShortcutTypeId): builder.PrependInt64Slot(30, ShortcutTypeId, 0)
def ItemExcelAddGachaTicket(builder, GachaTicket): builder.PrependInt32Slot(31, GachaTicket, 0)
def ItemExcelEnd(builder): return builder.EndObject()
