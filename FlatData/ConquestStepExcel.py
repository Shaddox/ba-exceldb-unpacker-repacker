# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConquestStepExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsConquestStepExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConquestStepExcel()
        x.Init(buf, n + offset)
        return x

    # ConquestStepExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConquestStepExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConquestStepExcel
    def MapDifficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConquestStepExcel
    def Step(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConquestStepExcel
    def StepGoalLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConquestStepExcel
    def StepEnterScenarioGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConquestStepExcel
    def StepEnterItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConquestStepExcel
    def StepEnterItemUniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConquestStepExcel
    def StepEnterItemAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConquestStepExcel
    def UnexpectedEventUnitId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ConquestStepExcel
    def UnexpectedEventUnitIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ConquestStepExcel
    def UnexpectedEventUnitIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConquestStepExcel
    def UnexpectedEventUnitIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # ConquestStepExcel
    def UnexpectedEventPrefab(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConquestStepExcel
    def TreasureBoxObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConquestStepExcel
    def TreasureBoxCountPerStepOpen(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ConquestStepExcelStart(builder): builder.StartObject(12)
def ConquestStepExcelAddEventContentId(builder, EventContentId): builder.PrependInt64Slot(0, EventContentId, 0)
def ConquestStepExcelAddMapDifficulty(builder, MapDifficulty): builder.PrependInt32Slot(1, MapDifficulty, 0)
def ConquestStepExcelAddStep(builder, Step): builder.PrependInt32Slot(2, Step, 0)
def ConquestStepExcelAddStepGoalLocalize(builder, StepGoalLocalize): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(StepGoalLocalize), 0)
def ConquestStepExcelAddStepEnterScenarioGroupId(builder, StepEnterScenarioGroupId): builder.PrependInt64Slot(4, StepEnterScenarioGroupId, 0)
def ConquestStepExcelAddStepEnterItemType(builder, StepEnterItemType): builder.PrependInt32Slot(5, StepEnterItemType, 0)
def ConquestStepExcelAddStepEnterItemUniqueId(builder, StepEnterItemUniqueId): builder.PrependInt64Slot(6, StepEnterItemUniqueId, 0)
def ConquestStepExcelAddStepEnterItemAmount(builder, StepEnterItemAmount): builder.PrependInt64Slot(7, StepEnterItemAmount, 0)
def ConquestStepExcelAddUnexpectedEventUnitId(builder, UnexpectedEventUnitId): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(UnexpectedEventUnitId), 0)
def ConquestStepExcelStartUnexpectedEventUnitIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def ConquestStepExcelAddUnexpectedEventPrefab(builder, UnexpectedEventPrefab): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(UnexpectedEventPrefab), 0)
def ConquestStepExcelAddTreasureBoxObjectId(builder, TreasureBoxObjectId): builder.PrependInt64Slot(10, TreasureBoxObjectId, 0)
def ConquestStepExcelAddTreasureBoxCountPerStepOpen(builder, TreasureBoxCountPerStepOpen): builder.PrependInt32Slot(11, TreasureBoxCountPerStepOpen, 0)
def ConquestStepExcelEnd(builder): return builder.EndObject()
