# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ScenarioCharacterSituationSetExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsScenarioCharacterSituationSetExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScenarioCharacterSituationSetExcel()
        x.Init(buf, n + offset)
        return x

    # ScenarioCharacterSituationSetExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScenarioCharacterSituationSetExcel
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ScenarioCharacterSituationSetExcel
    def Face(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioCharacterSituationSetExcel
    def Behavior(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioCharacterSituationSetExcel
    def Action(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioCharacterSituationSetExcel
    def Shape(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ScenarioCharacterSituationSetExcel
    def Effect(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ScenarioCharacterSituationSetExcel
    def Emotion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def ScenarioCharacterSituationSetExcelStart(builder): builder.StartObject(7)
def ScenarioCharacterSituationSetExcelAddName(builder, Name): builder.PrependUint32Slot(0, Name, 0)
def ScenarioCharacterSituationSetExcelAddFace(builder, Face): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(Face), 0)
def ScenarioCharacterSituationSetExcelAddBehavior(builder, Behavior): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(Behavior), 0)
def ScenarioCharacterSituationSetExcelAddAction(builder, Action): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(Action), 0)
def ScenarioCharacterSituationSetExcelAddShape(builder, Shape): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(Shape), 0)
def ScenarioCharacterSituationSetExcelAddEffect(builder, Effect): builder.PrependUint32Slot(5, Effect, 0)
def ScenarioCharacterSituationSetExcelAddEmotion(builder, Emotion): builder.PrependUint32Slot(6, Emotion, 0)
def ScenarioCharacterSituationSetExcelEnd(builder): return builder.EndObject()
