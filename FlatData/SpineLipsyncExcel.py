# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SpineLipsyncExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSpineLipsyncExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SpineLipsyncExcel()
        x.Init(buf, n + offset)
        return x

    # SpineLipsyncExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SpineLipsyncExcel
    def VoiceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SpineLipsyncExcel
    def AnimJson(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SpineLipsyncExcel
    def AnimJsonKr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SpineLipsyncExcelStart(builder): builder.StartObject(3)
def SpineLipsyncExcelAddVoiceId(builder, VoiceId): builder.PrependUint32Slot(0, VoiceId, 0)
def SpineLipsyncExcelAddAnimJson(builder, AnimJson): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(AnimJson), 0)
def SpineLipsyncExcelAddAnimJsonKr(builder, AnimJsonKr): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(AnimJsonKr), 0)
def SpineLipsyncExcelEnd(builder): return builder.EndObject()
