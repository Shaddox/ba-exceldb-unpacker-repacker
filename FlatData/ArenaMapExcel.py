# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ArenaMapExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsArenaMapExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ArenaMapExcel()
        x.Init(buf, n + offset)
        return x

    # ArenaMapExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ArenaMapExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ArenaMapExcel
    def TerrainType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ArenaMapExcel
    def TerrainTypeLocalizeKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ArenaMapExcel
    def ImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ArenaMapExcel
    def GroundGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ArenaMapExcel
    def GroundGroupNameLocalizeKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ArenaMapExcel
    def StartRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ArenaMapExcel
    def EndRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ArenaMapExcel
    def GroundId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def ArenaMapExcelStart(builder): builder.StartObject(9)
def ArenaMapExcelAddUniqueId(builder, UniqueId): builder.PrependInt64Slot(0, UniqueId, 0)
def ArenaMapExcelAddTerrainType(builder, TerrainType): builder.PrependInt64Slot(1, TerrainType, 0)
def ArenaMapExcelAddTerrainTypeLocalizeKey(builder, TerrainTypeLocalizeKey): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(TerrainTypeLocalizeKey), 0)
def ArenaMapExcelAddImagePath(builder, ImagePath): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(ImagePath), 0)
def ArenaMapExcelAddGroundGroupId(builder, GroundGroupId): builder.PrependInt64Slot(4, GroundGroupId, 0)
def ArenaMapExcelAddGroundGroupNameLocalizeKey(builder, GroundGroupNameLocalizeKey): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(GroundGroupNameLocalizeKey), 0)
def ArenaMapExcelAddStartRank(builder, StartRank): builder.PrependInt64Slot(6, StartRank, 0)
def ArenaMapExcelAddEndRank(builder, EndRank): builder.PrependInt64Slot(7, EndRank, 0)
def ArenaMapExcelAddGroundId(builder, GroundId): builder.PrependInt64Slot(8, GroundId, 0)
def ArenaMapExcelEnd(builder): return builder.EndObject()
