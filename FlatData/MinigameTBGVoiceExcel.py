# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MinigameTBGVoiceExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMinigameTBGVoiceExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MinigameTBGVoiceExcel()
        x.Init(buf, n + offset)
        return x

    # MinigameTBGVoiceExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MinigameTBGVoiceExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGVoiceExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGVoiceExcel
    def VoiceCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGVoiceExcel
    def VoiceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def MinigameTBGVoiceExcelStart(builder): builder.StartObject(4)
def MinigameTBGVoiceExcelAddEventContentId(builder, EventContentId): builder.PrependInt64Slot(0, EventContentId, 0)
def MinigameTBGVoiceExcelAddUniqueId(builder, UniqueId): builder.PrependInt64Slot(1, UniqueId, 0)
def MinigameTBGVoiceExcelAddVoiceCondition(builder, VoiceCondition): builder.PrependInt32Slot(2, VoiceCondition, 0)
def MinigameTBGVoiceExcelAddVoiceId(builder, VoiceId): builder.PrependUint32Slot(3, VoiceId, 0)
def MinigameTBGVoiceExcelEnd(builder): return builder.EndObject()
