# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameDreamReplayScenarioExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMiniGameDreamReplayScenarioExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameDreamReplayScenarioExcel()
        x.Init(buf, n + offset)
        return x

    # MiniGameDreamReplayScenarioExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameDreamReplayScenarioExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamReplayScenarioExcel
    def ScenarioGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamReplayScenarioExcel
    def Order(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamReplayScenarioExcel
    def ReplaySummaryTitleLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamReplayScenarioExcel
    def ReplaySummaryLocalizeScenarioId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamReplayScenarioExcel
    def ReplayScenarioResource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameDreamReplayScenarioExcel
    def IsReplayScenarioHorizon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def MiniGameDreamReplayScenarioExcelStart(builder): builder.StartObject(7)
def MiniGameDreamReplayScenarioExcelAddEventContentId(builder, EventContentId): builder.PrependInt64Slot(0, EventContentId, 0)
def MiniGameDreamReplayScenarioExcelAddScenarioGroupId(builder, ScenarioGroupId): builder.PrependInt64Slot(1, ScenarioGroupId, 0)
def MiniGameDreamReplayScenarioExcelAddOrder(builder, Order): builder.PrependInt64Slot(2, Order, 0)
def MiniGameDreamReplayScenarioExcelAddReplaySummaryTitleLocalize(builder, ReplaySummaryTitleLocalize): builder.PrependUint32Slot(3, ReplaySummaryTitleLocalize, 0)
def MiniGameDreamReplayScenarioExcelAddReplaySummaryLocalizeScenarioId(builder, ReplaySummaryLocalizeScenarioId): builder.PrependUint32Slot(4, ReplaySummaryLocalizeScenarioId, 0)
def MiniGameDreamReplayScenarioExcelAddReplayScenarioResource(builder, ReplayScenarioResource): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(ReplayScenarioResource), 0)
def MiniGameDreamReplayScenarioExcelAddIsReplayScenarioHorizon(builder, IsReplayScenarioHorizon): builder.PrependBoolSlot(6, IsReplayScenarioHorizon, 0)
def MiniGameDreamReplayScenarioExcelEnd(builder): return builder.EndObject()
