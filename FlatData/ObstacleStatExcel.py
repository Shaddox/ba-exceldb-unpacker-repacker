# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ObstacleStatExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsObstacleStatExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ObstacleStatExcel()
        x.Init(buf, n + offset)
        return x

    # ObstacleStatExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ObstacleStatExcel
    def StringID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ObstacleStatExcel
    def MaxHP1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def MaxHP100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def BlockRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def Dodge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def CanNotStandRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObstacleStatExcel
    def HighlightFloaterHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def ObstacleStatExcelStart(builder): builder.StartObject(8)
def ObstacleStatExcelAddStringID(builder, StringID): builder.PrependUint32Slot(0, StringID, 0)
def ObstacleStatExcelAddName(builder, Name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(Name), 0)
def ObstacleStatExcelAddMaxHP1(builder, MaxHP1): builder.PrependInt64Slot(2, MaxHP1, 0)
def ObstacleStatExcelAddMaxHP100(builder, MaxHP100): builder.PrependInt64Slot(3, MaxHP100, 0)
def ObstacleStatExcelAddBlockRate(builder, BlockRate): builder.PrependInt64Slot(4, BlockRate, 0)
def ObstacleStatExcelAddDodge(builder, Dodge): builder.PrependInt64Slot(5, Dodge, 0)
def ObstacleStatExcelAddCanNotStandRange(builder, CanNotStandRange): builder.PrependInt64Slot(6, CanNotStandRange, 0)
def ObstacleStatExcelAddHighlightFloaterHeight(builder, HighlightFloaterHeight): builder.PrependFloat32Slot(7, HighlightFloaterHeight, 0.0)
def ObstacleStatExcelEnd(builder): return builder.EndObject()
