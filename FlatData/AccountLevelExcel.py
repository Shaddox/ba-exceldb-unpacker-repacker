# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AccountLevelExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAccountLevelExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AccountLevelExcel()
        x.Init(buf, n + offset)
        return x

    # AccountLevelExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AccountLevelExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AccountLevelExcel
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AccountLevelExcel
    def Exp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AccountLevelExcel
    def APAutoChargeMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AccountLevelExcel
    def NeedReportEvent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def AccountLevelExcelStart(builder): builder.StartObject(5)
def AccountLevelExcelAddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def AccountLevelExcelAddLevel(builder, Level): builder.PrependInt64Slot(1, Level, 0)
def AccountLevelExcelAddExp(builder, Exp): builder.PrependInt64Slot(2, Exp, 0)
def AccountLevelExcelAddAPAutoChargeMax(builder, APAutoChargeMax): builder.PrependInt64Slot(3, APAutoChargeMax, 0)
def AccountLevelExcelAddNeedReportEvent(builder, NeedReportEvent): builder.PrependBoolSlot(4, NeedReportEvent, 0)
def AccountLevelExcelEnd(builder): return builder.EndObject()
