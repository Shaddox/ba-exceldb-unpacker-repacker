# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FurnitureExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFurnitureExcel(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FurnitureExcel()
        x.Init(buf, n + offset)
        return x

    # FurnitureExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FurnitureExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def ProductionStep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def SubCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def StarGradeInit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def Tier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def Icon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FurnitureExcel
    def SizeWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def SizeHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def OtherSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def ExpandWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def Enable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FurnitureExcel
    def ReverseRotation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FurnitureExcel
    def Prefab(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FurnitureExcel
    def PrefabExpand(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FurnitureExcel
    def SubPrefab(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FurnitureExcel
    def SubExpandPrefab(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FurnitureExcel
    def CornerPrefab(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FurnitureExcel
    def StackableMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def RecipeCraftId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def SetGroudpId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def ComfortBonus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def VisitOperationType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def VisitBonusOperationType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FurnitureExcel
    def TagsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # FurnitureExcel
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FurnitureExcel
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        return o == 0

    # FurnitureExcel
    def CraftQualityTier0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def CraftQualityTier1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def CraftQualityTier2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def ShiftingCraftQuality(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def FurnitureFunctionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def FurnitureFunctionParameter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def VideoId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def EventCollectionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def FurnitureBubbleOffsetX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def FurnitureBubbleOffsetY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FurnitureExcel
    def CafeCharacterStateReq(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # FurnitureExcel
    def CafeCharacterStateReqLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FurnitureExcel
    def CafeCharacterStateReqIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        return o == 0

    # FurnitureExcel
    def CafeCharacterStateAdd(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # FurnitureExcel
    def CafeCharacterStateAddLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FurnitureExcel
    def CafeCharacterStateAddIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        return o == 0

    # FurnitureExcel
    def CafeCharacterStateMake(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # FurnitureExcel
    def CafeCharacterStateMakeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FurnitureExcel
    def CafeCharacterStateMakeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        return o == 0

    # FurnitureExcel
    def CafeCharacterStateOnly(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # FurnitureExcel
    def CafeCharacterStateOnlyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FurnitureExcel
    def CafeCharacterStateOnlyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        return o == 0

def FurnitureExcelStart(builder): builder.StartObject(41)
def FurnitureExcelAddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def FurnitureExcelAddProductionStep(builder, ProductionStep): builder.PrependInt32Slot(1, ProductionStep, 0)
def FurnitureExcelAddRarity(builder, Rarity): builder.PrependInt32Slot(2, Rarity, 0)
def FurnitureExcelAddCategory(builder, Category): builder.PrependInt32Slot(3, Category, 0)
def FurnitureExcelAddSubCategory(builder, SubCategory): builder.PrependInt32Slot(4, SubCategory, 0)
def FurnitureExcelAddLocalizeEtcId(builder, LocalizeEtcId): builder.PrependUint32Slot(5, LocalizeEtcId, 0)
def FurnitureExcelAddStarGradeInit(builder, StarGradeInit): builder.PrependInt32Slot(6, StarGradeInit, 0)
def FurnitureExcelAddTier(builder, Tier): builder.PrependInt64Slot(7, Tier, 0)
def FurnitureExcelAddIcon(builder, Icon): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(Icon), 0)
def FurnitureExcelAddSizeWidth(builder, SizeWidth): builder.PrependInt32Slot(9, SizeWidth, 0)
def FurnitureExcelAddSizeHeight(builder, SizeHeight): builder.PrependInt32Slot(10, SizeHeight, 0)
def FurnitureExcelAddOtherSize(builder, OtherSize): builder.PrependInt32Slot(11, OtherSize, 0)
def FurnitureExcelAddExpandWidth(builder, ExpandWidth): builder.PrependInt32Slot(12, ExpandWidth, 0)
def FurnitureExcelAddEnable(builder, Enable): builder.PrependBoolSlot(13, Enable, 0)
def FurnitureExcelAddReverseRotation(builder, ReverseRotation): builder.PrependBoolSlot(14, ReverseRotation, 0)
def FurnitureExcelAddPrefab(builder, Prefab): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(Prefab), 0)
def FurnitureExcelAddPrefabExpand(builder, PrefabExpand): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(PrefabExpand), 0)
def FurnitureExcelAddSubPrefab(builder, SubPrefab): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(SubPrefab), 0)
def FurnitureExcelAddSubExpandPrefab(builder, SubExpandPrefab): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(SubExpandPrefab), 0)
def FurnitureExcelAddCornerPrefab(builder, CornerPrefab): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(CornerPrefab), 0)
def FurnitureExcelAddStackableMax(builder, StackableMax): builder.PrependInt64Slot(20, StackableMax, 0)
def FurnitureExcelAddRecipeCraftId(builder, RecipeCraftId): builder.PrependInt64Slot(21, RecipeCraftId, 0)
def FurnitureExcelAddSetGroudpId(builder, SetGroudpId): builder.PrependInt64Slot(22, SetGroudpId, 0)
def FurnitureExcelAddComfortBonus(builder, ComfortBonus): builder.PrependInt64Slot(23, ComfortBonus, 0)
def FurnitureExcelAddVisitOperationType(builder, VisitOperationType): builder.PrependInt64Slot(24, VisitOperationType, 0)
def FurnitureExcelAddVisitBonusOperationType(builder, VisitBonusOperationType): builder.PrependInt64Slot(25, VisitBonusOperationType, 0)
def FurnitureExcelAddTags(builder, Tags): builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(Tags), 0)
def FurnitureExcelStartTagsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FurnitureExcelAddCraftQualityTier0(builder, CraftQualityTier0): builder.PrependInt64Slot(27, CraftQualityTier0, 0)
def FurnitureExcelAddCraftQualityTier1(builder, CraftQualityTier1): builder.PrependInt64Slot(28, CraftQualityTier1, 0)
def FurnitureExcelAddCraftQualityTier2(builder, CraftQualityTier2): builder.PrependInt64Slot(29, CraftQualityTier2, 0)
def FurnitureExcelAddShiftingCraftQuality(builder, ShiftingCraftQuality): builder.PrependInt64Slot(30, ShiftingCraftQuality, 0)
def FurnitureExcelAddFurnitureFunctionType(builder, FurnitureFunctionType): builder.PrependInt32Slot(31, FurnitureFunctionType, 0)
def FurnitureExcelAddFurnitureFunctionParameter(builder, FurnitureFunctionParameter): builder.PrependInt64Slot(32, FurnitureFunctionParameter, 0)
def FurnitureExcelAddVideoId(builder, VideoId): builder.PrependInt64Slot(33, VideoId, 0)
def FurnitureExcelAddEventCollectionId(builder, EventCollectionId): builder.PrependInt64Slot(34, EventCollectionId, 0)
def FurnitureExcelAddFurnitureBubbleOffsetX(builder, FurnitureBubbleOffsetX): builder.PrependInt64Slot(35, FurnitureBubbleOffsetX, 0)
def FurnitureExcelAddFurnitureBubbleOffsetY(builder, FurnitureBubbleOffsetY): builder.PrependInt64Slot(36, FurnitureBubbleOffsetY, 0)
def FurnitureExcelAddCafeCharacterStateReq(builder, CafeCharacterStateReq): builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(CafeCharacterStateReq), 0)
def FurnitureExcelStartCafeCharacterStateReqVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FurnitureExcelAddCafeCharacterStateAdd(builder, CafeCharacterStateAdd): builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(CafeCharacterStateAdd), 0)
def FurnitureExcelStartCafeCharacterStateAddVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FurnitureExcelAddCafeCharacterStateMake(builder, CafeCharacterStateMake): builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(CafeCharacterStateMake), 0)
def FurnitureExcelStartCafeCharacterStateMakeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FurnitureExcelAddCafeCharacterStateOnly(builder, CafeCharacterStateOnly): builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(CafeCharacterStateOnly), 0)
def FurnitureExcelStartCafeCharacterStateOnlyVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FurnitureExcelEnd(builder): return builder.EndObject()
